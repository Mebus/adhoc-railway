/*------------------------------------------------------------------------
 * 
 * copyright : (C) 2008 by Benjamin Mueller 
 * email     : news@fork.ch
 * website   : http://sourceforge.net/projects/adhocrailway
 * version   : $Id: Locomotive.java 199 2012-01-14 23:46:24Z fork_ch $
 * 
 *----------------------------------------------------------------------*/

/*------------------------------------------------------------------------
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 *----------------------------------------------------------------------*/

package ch.fork.AdHocRailway.services.locomotives;

// Generated 08-Aug-2007 18:10:44 by Hibernate Tools 3.2.0.beta8

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.jgoodies.binding.beans.Model;

/**
 * Locomotive generated by hbm2java
 */
@Entity
@Table(name = "locomotive", uniqueConstraints = {})
public class HibernateLocomotive extends Model implements java.io.Serializable,
		Comparable<HibernateLocomotive> {

	// Fields
	@Id
	@GeneratedValue
	private int id;

	private HibernateLocomotiveGroup locomotiveGroup;

	private String type;

	private String name;

	private String description;

	private String image;

	private int address;

	private int bus;

	@Override
	public int compareTo(HibernateLocomotive o) {
		if (this == o) {
			return 0;
		}
		if (o == null) {
			return -1;
		}
		if (name == null) {
			if (id > o.getId()) {
				return 1;
			} else if (id == o.getId()) {
				return 0;
			} else {
				return -1;
			}
		} else {
			return name.compareTo(o.getName());
		}

	}

	@Override
	@Transient
	public String toString() {
		return name;
	}

	// Constructors

	/** default constructor */
	public HibernateLocomotive() {
	}

	/** minimal constructor */
	public HibernateLocomotive(int id,
			HibernateLocomotiveGroup locomotiveGroup, String locomotiveType,
			String name, int address, int bus) {
		this.id = id;
		this.locomotiveGroup = locomotiveGroup;
		this.type = locomotiveType;
		this.name = name;
		this.address = address;
		this.bus = bus;

	}

	/** full constructor */
	public HibernateLocomotive(int id,
			HibernateLocomotiveGroup locomotiveGroup, String locomotiveType,
			String name, String description, String image, int address, int bus) {
		this.id = id;
		this.locomotiveGroup = locomotiveGroup;
		this.type = locomotiveType;
		this.name = name;
		this.description = description;
		this.image = image;
		this.address = address;
		this.bus = bus;

	}

	// Property accessors

	@Id
	@GeneratedValue
	@Column(name = "id", unique = true, nullable = true, insertable = true, updatable = true)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "locomotive_group_id", unique = false, nullable = true, insertable = true, updatable = true)
	public HibernateLocomotiveGroup getLocomotiveGroup() {
		return this.locomotiveGroup;
	}

	public void setLocomotiveGroup(HibernateLocomotiveGroup locomotiveGroup) {
		this.locomotiveGroup = locomotiveGroup;
	}

	@Column(name = "type", unique = false, nullable = false, insertable = true, updatable = true)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "name", unique = false, nullable = false, insertable = true, updatable = true)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", unique = false, nullable = true, insertable = true, updatable = true)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "image", unique = false, nullable = true, insertable = true, updatable = true)
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "address", unique = false, nullable = false, insertable = true, updatable = true)
	public int getAddress() {
		return this.address;
	}

	public void setAddress(int address) {
		this.address = address;
	}

	@Column(name = "bus", unique = false, nullable = false, insertable = true, updatable = true)
	public int getBus() {
		return this.bus;
	}

	public void setBus(int bus) {
		this.bus = bus;
	}

	@Transient
	public int[] getAddresses() {
		return new int[] { address };
	}

	@Override
	@Transient
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + address;
		result = prime * result + bus;
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + id;
		result = prime * result + ((image == null) ? 0 : image.hashCode());
		result = prime * result
				+ ((locomotiveGroup == null) ? 0 : locomotiveGroup.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	@Transient
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final HibernateLocomotive other = (HibernateLocomotive) obj;
		if (address != other.address) {
			return false;
		}
		if (bus != other.bus) {
			return false;
		}
		if (description == null) {
			if (other.description != null) {
				return false;
			}
		} else if (!description.equals(other.description)) {
			return false;
		}
		if (id != other.id) {
			return false;
		}
		if (image == null) {
			if (other.image != null) {
				return false;
			}
		} else if (!image.equals(other.image)) {
			return false;
		}
		if (locomotiveGroup == null) {
			if (other.locomotiveGroup != null) {
				return false;
			}
		} else if (!locomotiveGroup.equals(other.locomotiveGroup)) {
			return false;
		}
		if (type == null) {
			if (other.type != null) {
				return false;
			}
		} else if (!type.equals(other.type)) {
			return false;
		}
		if (name == null) {
			if (other.name != null) {
				return false;
			}
		} else if (!name.equals(other.name)) {
			return false;
		}
		return true;
	}

}

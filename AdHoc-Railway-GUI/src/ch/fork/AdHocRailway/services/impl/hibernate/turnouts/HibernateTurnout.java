/*------------------------------------------------------------------------
 * 
 * copyright : (C) 2008 by Benjamin Mueller 
 * email     : news@fork.ch
 * website   : http://sourceforge.net/projects/adhocrailway
 * version   : $Id: Turnout.java 199 2012-01-14 23:46:24Z fork_ch $
 * 
 *----------------------------------------------------------------------*/

/*------------------------------------------------------------------------
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 *----------------------------------------------------------------------*/

package ch.fork.AdHocRailway.services.impl.hibernate.turnouts;

// Generated 08-Aug-2007 18:10:44 by Hibernate Tools 3.2.0.beta8

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;


import com.jgoodies.binding.beans.Model;

/**
 * Turnout generated by hbm2java
 */
@Entity
@Table(name = "turnout", uniqueConstraints = { @UniqueConstraint(columnNames = { "number" }) })
public class HibernateTurnout extends Model implements java.io.Serializable,
		Comparable<HibernateTurnout> {

	// Fields

	@Id
	@GeneratedValue
	private int id;

	private String type;

	private HibernateTurnoutGroup turnoutGroup;

	private int number;

	private String description;

	private String defaultState;

	private String orientation;

	private Set<HibernateRouteItem> routeItems = new HashSet<HibernateRouteItem>(
			0);

	private int address1;

	private int address2;

	private int bus1;

	private int bus2;

	private boolean address1Switched;

	private boolean address2Switched;

	public static final String PROPERTYNAME_ID = "id";
	public static final String PROPERTYNAME_TURNOUT_TYPE = "turnoutType";
	public static final String PROPERTYNAME_TURNOUT_GROUP = "turnoutGroup";
	public static final String PROPERTYNAME_NUMBER = "number";
	public static final String PROPERTYNAME_DESCRIPTION = "description";
	public static final String PROPERTYNAME_DEFAULT_STATE = "defaultStateEnum";
	public static final String PROPERTYNAME_ORIENTATION = "orientationEnum";
	public static final String PROPERTYNAME_ROUTE_ITEMS = "routeItems";
	public static final String PROPERTYNAME_ADDRESS1 = "address1";
	public static final String PROPERTYNAME_ADDRESS2 = "address2";
	public static final String PROPERTYNAME_BUS1 = "bus1";
	public static final String PROPERTYNAME_BUS2 = "bus2";
	public static final String PROPERTYNAME_ADDRESS1_SWITCHED = "address1Switched";
	public static final String PROPERTYNAME_ADDRESS2_SWITCHED = "address2Switched";

	@Override
	public int compareTo(HibernateTurnout o) {
		if (this == o) {
			return 0;
		}
		if (o == null) {
			return -1;
		}
		if (number > o.getNumber()) {
			return 1;
		} else if (number == o.getNumber()) {
			return 0;
		} else {
			return -1;
		}
	}

	@Override
	public String toString() {
		String str = "#" + number;
		str += " Addr1 [" + bus1 + "," + address1 + "," + address1Switched
				+ "]";
		str += " Addr2 [" + bus2 + "," + address2 + "," + address2Switched
				+ "]";
		str += " default " + defaultState;
		str += " group " + turnoutGroup.getName();
		return str;
	}

	// GENERATED BY HIBERNATE
	// Constructors

	/** default constructor */
	public HibernateTurnout() {
	}

	/** minimal constructor */
	public HibernateTurnout(int id, String type,
			HibernateTurnoutGroup turnoutGroup, int number, String description,
			String defaultState, String orientation, int address1, int bus1,
			boolean address1_switched) {
		this.id = id;
		this.type = type;
		this.turnoutGroup = turnoutGroup;
		this.number = number;
		this.description = description;
		this.defaultState = defaultState;
		this.orientation = orientation;
		this.address1 = address1;
		this.bus1 = bus1;
		this.address1Switched = address1_switched;
	}

	/** full constructor */
	public HibernateTurnout(int id, String turnoutType,
			HibernateTurnoutGroup turnoutGroup, int number, String description,
			String defaultState, String orientation,
			Set<HibernateRouteItem> routeItems, int address1, int address2,
			int bus1, int bus2, boolean address1_switched,
			boolean address2_switched) {
		this.id = id;
		this.type = turnoutType;
		this.turnoutGroup = turnoutGroup;
		this.number = number;
		this.description = description;
		this.defaultState = defaultState;
		this.orientation = orientation;
		this.routeItems = routeItems;
		this.address1 = address1;
		this.address2 = address2;
		this.bus1 = bus1;
		this.bus2 = bus2;
		this.address1Switched = address1_switched;
		this.address2Switched = address2_switched;

	}

	// Property accessors
	@Id
	@GeneratedValue
	@Column(name = "id", unique = true, nullable = true, insertable = true, updatable = true)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "type", unique = false, nullable = false, insertable = true, updatable = true)
	public String getTurnoutType() {
		return this.type;
	}

	public void setTurnoutType(String type) {
		this.type = type;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "turnout_group_id", unique = false, nullable = true, insertable = true, updatable = true)
	public HibernateTurnoutGroup getTurnoutGroup() {
		return this.turnoutGroup;
	}

	public void setTurnoutGroup(HibernateTurnoutGroup turnoutGroup) {
		this.turnoutGroup = turnoutGroup;
	}

	@Column(name = "number", unique = false, nullable = false, insertable = true, updatable = true)
	public int getNumber() {
		return this.number;
	}

	public void setNumber(int number) {
		this.number = number;
	}

	@Column(name = "description", unique = false, nullable = true, insertable = true, updatable = true)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "default_state", unique = false, nullable = false, insertable = true, updatable = true, length = 9)
	public String getDefaultState() {
		return this.defaultState;
	}

	public void setDefaultState(String defaultState) {
		this.defaultState = defaultState;
	}

	@Column(name = "orientation", unique = false, nullable = false, insertable = true, updatable = true, length = 6)
	public String getOrientation() {
		return this.orientation;
	}

	public void setOrientation(String orientation) {
		this.orientation = orientation;
	}

	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY, mappedBy = "turnout")
	public Set<HibernateRouteItem> getRouteItems() {
		return this.routeItems;
	}

	public void setRouteItems(Set<HibernateRouteItem> routeItems) {
		this.routeItems = routeItems;
	}

	@Column(name = "address1", unique = false, nullable = false, insertable = true, updatable = true)
	public int getAddress1() {
		return this.address1;
	}

	public void setAddress1(int address1) {
		this.address1 = address1;
	}

	@Column(name = "address2", unique = false, nullable = false, insertable = true, updatable = true)
	public int getAddress2() {
		return this.address2;
	}

	public void setAddress2(int address2) {
		this.address2 = address2;
	}

	@Column(name = "bus1", unique = false, nullable = false, insertable = true, updatable = true)
	public int getBus1() {
		return this.bus1;
	}

	public void setBus1(int bus1) {
		int old = this.bus1;
		this.bus1 = bus1;
		firePropertyChange(PROPERTYNAME_BUS1, old, bus1);
	}

	@Column(name = "bus2", unique = false, nullable = false, insertable = true, updatable = true)
	public int getBus2() {
		return this.bus2;
	}

	public void setBus2(int bus2) {
		this.bus2 = bus2;
	}

	@Column(name = "address1_switched", unique = false, nullable = false, insertable = true, updatable = true)
	public boolean isAddress1Switched() {
		return this.address1Switched;
	}

	public void setAddress1Switched(boolean address1Switched) {
		this.address1Switched = address1Switched;
	}

	@Column(name = "address2_switched", unique = false, nullable = true, insertable = true, updatable = true)
	public boolean isAddress2Switched() {
		return this.address2Switched;
	}

	public void setAddress2Switched(boolean address2Switched) {
		this.address2Switched = address2Switched;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + address1;
		result = prime * result + (address1Switched ? 1231 : 1237);
		result = prime * result + address2;
		result = prime * result + (address2Switched ? 1231 : 1237);
		result = prime * result + bus1;
		result = prime * result + bus2;
		result = prime * result
				+ ((defaultState == null) ? 0 : defaultState.hashCode());
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + number;
		result = prime * result
				+ ((orientation == null) ? 0 : orientation.hashCode());
		result = prime * result
				+ ((turnoutGroup == null) ? 0 : turnoutGroup.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final HibernateTurnout other = (HibernateTurnout) obj;
		if (address1 != other.address1) {
			return false;
		}
		if (address1Switched != other.address1Switched) {
			return false;
		}
		if (address2 != other.address2) {
			return false;
		}
		if (address2Switched != other.address2Switched) {
			return false;
		}
		if (bus1 != other.bus1) {
			return false;
		}
		if (bus2 != other.bus2) {
			return false;
		}
		if (defaultState == null) {
			if (other.defaultState != null) {
				return false;
			}
		} else if (!defaultState.equals(other.defaultState)) {
			return false;
		}
		if (description == null) {
			if (other.description != null) {
				return false;
			}
		} else if (!description.equals(other.description)) {
			return false;
		}
		if (number != other.number) {
			return false;
		}
		if (orientation == null) {
			if (other.orientation != null) {
				return false;
			}
		} else if (!orientation.equals(other.orientation)) {
			return false;
		}
		if (turnoutGroup == null) {
			if (other.turnoutGroup != null) {
				return false;
			}
		} else if (!turnoutGroup.equals(other.turnoutGroup)) {
			return false;
		}
		if (type == null) {
			if (other.type != null) {
				return false;
			}
		} else if (!type.equals(other.type)) {
			return false;
		}
		return true;
	}

	@Override
	public Object clone() {
		HibernateTurnout newT = new HibernateTurnout(id, type, turnoutGroup,
				number, description, defaultState, orientation, routeItems,
				address1, address2, bus1, bus2, address1Switched,
				address2Switched);
		return newT;
	}
}

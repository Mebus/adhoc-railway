package ch.fork.AdHocRailway.domain.locomotives;

// Generated 08-Aug-2007 18:10:44 by Hibernate Tools 3.2.0.beta8

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import ch.fork.AdHocRailway.domain.ControlObject;
import de.dermoba.srcp.client.SRCPSession;
import de.dermoba.srcp.devices.GL;

/**
 * Locomotive generated by hbm2java
 */
@Entity
@Table(name = "locomotive", catalog = "adhocrailway", uniqueConstraints = {})
public class Locomotive extends ControlObject implements java.io.Serializable, Comparable<Locomotive> {

	// Fields

	private int id;

	private LocomotiveGroup locomotiveGroup;

	private LocomotiveType locomotiveType;

	private String name;

	private String description;

	private String image;

	private int address;

	private int bus;

	public enum Direction {
		FORWARD, REVERSE, UNDEF
	};

	@Transient
	protected Direction direction = Direction.UNDEF;


	protected static final String FORWARD_DIRECTION = "1";

	protected static final String REVERSE_DIRECTION = "0";

	protected int currentSpeed = 0;

	@Transient
	private GL gl;

	@Transient
	private SRCPSession session;

	protected boolean[] functions = new boolean[] { false, false, false, false, false };

	protected String[] params;

	public int compareTo(Locomotive o) {
		if(this == o) return 0;
		if(o == null) return -1;
		return name.compareTo(o.getName());
	}
	
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;

		final Locomotive l = (Locomotive) o;
		if (id != l.getId())
			return false;
		if (!name.equals(l.getName()))
			return false;
		if (!locomotiveGroup.equals(l.getLocomotiveGroup()))
			return false;
		if (!locomotiveType.equals(l.getLocomotiveType()))
			return false;
		if (!description.equals(l.getDescription()))
			return false;
		if (!image.equals(l.getImage()))
			return false;
		if (address != l.getAddress())
			return false;
		if (bus != l.getBus())
			return false;
		return true;
	}

	public int hashCode() {
		return name.hashCode() + locomotiveGroup.hashCode()
				+ locomotiveType.hashCode() + address + bus;
	}
	
	public String toString() {
		return name;
	}

	// Constructors

	/** default constructor */
	public Locomotive() {
	}

	/** full constructor */
	public Locomotive(int id, LocomotiveGroup locomotiveGroup,
			LocomotiveType locomotiveType, String name, String description,
			String image, int address, int bus) {
		this.id = id;
		this.locomotiveGroup = locomotiveGroup;
		this.locomotiveType = locomotiveType;
		this.name = name;
		this.description = description;
		this.image = image;
		this.address = address;
		this.bus = bus;
        
	}

	@Transient
	public int getCurrentSpeed() {
		return currentSpeed;
	}

	@Transient
	protected void setCurrentSpeed(int currentSpeed) {
		this.currentSpeed = currentSpeed;
	}
	
	@Transient
	public Direction getDirection() {
		return direction;
	}
	@Transient
	protected void setDirection(Direction direction) {
		this.direction = direction;
	}

	@Transient
	public boolean[] getFunctions() {
		return functions;
	}
	
	@Transient
	public void setFunctions(boolean[] functions) {
		this.functions = functions;
	}

	@Transient
	public String getDeviceGroup() {
		return "GL";
	}

	@Transient
	public GL getGL() {
		return this.gl;
	}

	@Transient
	protected void setGL(GL gl) {
		this.gl = gl;
	}

	@Transient
	public SRCPSession getSession() {
		return this.session;
	}

	@Transient
	public void setSession(SRCPSession session) {
		this.session = session;
	}

	// Property accessors
	@Id
	@Column(name = "id", unique = true, nullable = false, insertable = true, updatable = true)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(cascade= { CascadeType.ALL }, fetch = FetchType.EAGER)
	@JoinColumn(name = "locomotive_group_id", unique = false, nullable = false, insertable = true, updatable = true)
	public LocomotiveGroup getLocomotiveGroup() {
		return this.locomotiveGroup;
	}

	public void setLocomotiveGroup(LocomotiveGroup locomotiveGroup) {
		this.locomotiveGroup = locomotiveGroup;
	}

	@ManyToOne(cascade= { CascadeType.ALL }, fetch = FetchType.EAGER)
	@JoinColumn(name = "locomotive_type_id", unique = false, nullable = false, insertable = true, updatable = true)
	public LocomotiveType getLocomotiveType() {
		return this.locomotiveType;
	}

	public void setLocomotiveType(LocomotiveType locomotiveType) {
		this.locomotiveType = locomotiveType;
	}

	@Column(name = "name", unique = false, nullable = false, insertable = true, updatable = true)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", unique = false, nullable = false, insertable = true, updatable = true)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "image", unique = false, nullable = false, insertable = true, updatable = true)
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "address", unique = false, nullable = false, insertable = true, updatable = true)
	public int getAddress() {
		return this.address;
	}

	public void setAddress(int address) {
		this.address = address;
	}

	@Column(name = "bus", unique = false, nullable = false, insertable = true, updatable = true)
	public int getBus() {
		return this.bus;
	}

	public void setBus(int bus) {
		this.bus = bus;
	}

	@Transient
	public int[] getAddresses() {
		return new int[] {address};
	}
}

package ch.fork.AdHocRailway.domain.routes;

// Generated 08-Aug-2007 18:10:44 by Hibernate Tools 3.2.0.beta8

import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Sort;
import org.hibernate.annotations.SortType;

/**
 * Route generated by hbm2java
 */
@Entity
@Table(name = "route", catalog = "adhocrailway", uniqueConstraints = { @UniqueConstraint(columnNames = { "number" }) })
public class Route implements java.io.Serializable, Comparable<Route> {

	// Fields    
	@Id @GeneratedValue
	private int id;

	private RouteGroup routeGroup;

	private int number;

	private String name;


	@Sort(type = SortType.NATURAL)
	private SortedSet<RouteItem> routeItems = new TreeSet<RouteItem>();

	public enum RouteState {
		ENABLED, DISABLED
	};
	@Transient
	private RouteState routeState;

	@Transient
	private boolean changingRoute;

	@Transient
	public RouteState getRouteState() {
		return routeState;
	}

	@Transient
	protected void setRouteState(RouteState routeState) {
		this.routeState = routeState;
	}
	public int compareTo(Route o) {
		if(this == o) return 0;
		if(o == null) return -1;
		if (number > o.getNumber())
			return 1;
		else if (number == o.getNumber())
			return 0;
		else
			return -1;
	}
	
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;

		final Route l = (Route) o;
		if (id != l.getId())
			return false;
		if (!name.equals(l.getName()))
			return false;
		if (number != l.getNumber())
			return false;
		if(!routeGroup.equals(l.getRouteGroup()))
			return false;
		if(!routeItems.equals(l.getRouteItems()))
			return false;
		
		return true;
	}

	public int hashCode() {
		return name.hashCode() + routeGroup.hashCode()
				+ routeItems.hashCode() + number;
	}
	
	public String toString() {
		return name;
	}
	
	
	
	// Constructors

	/** default constructor */
	public Route() {
	}

	/** minimal constructor */
	public Route(int id, RouteGroup routeGroup, int number, String name) {
		this.id = id;
		this.routeGroup = routeGroup;
		this.number = number;
		this.name = name;
	}

	/** full constructor */
	public Route(int id, RouteGroup routeGroup, int number, String name,
			SortedSet<RouteItem> routeItems) {
		this.id = id;
		this.routeGroup = routeGroup;
		this.number = number;
		this.name = name;
		this.routeItems = routeItems;
	}

	// Property accessors

	@Id @GeneratedValue
	@Column(name = "id", unique = true, nullable = false, insertable = true, updatable = true)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(cascade = {}, fetch = FetchType.LAZY)
	@JoinColumn(name = "route_group_id", unique = false, nullable = false, insertable = true, updatable = true)
	public RouteGroup getRouteGroup() {
		return this.routeGroup;
	}

	public void setRouteGroup(RouteGroup routeGroup) {
		this.routeGroup = routeGroup;
	}

	@Column(name = "number", unique = true, nullable = false, insertable = true, updatable = true)
	public int getNumber() {
		return this.number;
	}

	public void setNumber(int number) {
		this.number = number;
	}

	@Column(name = "name", unique = false, nullable = false, insertable = true, updatable = true)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Sort(type = SortType.NATURAL)
	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY, mappedBy = "route")
	public SortedSet<RouteItem> getRouteItems() {
		return this.routeItems;
	}

	public void setRouteItems(SortedSet<RouteItem> routeItems) {
		this.routeItems = routeItems;
	}
	@Transient
	public void setChangeingRoute(boolean changingRoute) {
		this.changingRoute = changingRoute;
	}
	@Transient
	public boolean isChangingRoute() {
		return changingRoute;
	}


}

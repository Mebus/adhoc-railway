/*------------------------------------------------------------------------
 * 
 * copyright : (C) 2008 by Benjamin Mueller 
 * email     : news@fork.ch
 * website   : http://sourceforge.net/projects/adhocrailway
 * version   : $Id: LocomotiveType.java 199 2012-01-14 23:46:24Z fork_ch $
 * 
 *----------------------------------------------------------------------*/

/*------------------------------------------------------------------------
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 *----------------------------------------------------------------------*/

package ch.fork.AdHocRailway.services.impl.hibernate.locomotives;

// Generated 08-Aug-2007 18:10:44 by Hibernate Tools 3.2.0.beta8

import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Sort;
import org.hibernate.annotations.SortType;

/**
 * LocomotiveType generated by hbm2java
 */
// @Entity
@Table(name = "locomotive_type", uniqueConstraints = {})
public class HibernateLocomotiveType implements java.io.Serializable,
		Comparable<HibernateLocomotiveType> {

	// Fields

	/**
	 * 
	 */
	private static final long serialVersionUID = 5199655269654400679L;

	@Id
	@GeneratedValue
	private int id;

	private String typeName;

	private int drivingSteps;

	private int stepping;

	private int functionCount;

	public static final int PROTOCOL_VERSION = 2;

	public static final String PROTOCOL = "M";

	@Sort(type = SortType.NATURAL)
	private SortedSet<HibernateLocomotive> locomotives = new TreeSet<HibernateLocomotive>();

	public static final String PROPERTYNAME_ID = "id";
	public static final String PROPERTYNAME_TYPE_NAME = "typeName";
	public static final String PROPERTYNAME_DRIVING_STEPS = "drivingSteps";
	public static final String PROPERTYNAME_STEPPING = "stepping";
	public static final String PROPERTYNAME_FUNCTION_COUNT = "functionCount";
	public static final String PROPERTYNAME_LOCOMOTIVES = "locomotives";

	@Override
	public int compareTo(final HibernateLocomotiveType o) {
		if (this == o) {
			return 0;
		}
		if (o == null) {
			return -1;
		}
		return typeName.compareTo(o.getTypeName());
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + drivingSteps;
		result = prime * result + functionCount;
		result = prime * result + id;
		result = prime * result + stepping;
		result = prime * result
				+ ((typeName == null) ? 0 : typeName.hashCode());
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final HibernateLocomotiveType other = (HibernateLocomotiveType) obj;
		if (drivingSteps != other.drivingSteps) {
			return false;
		}
		if (functionCount != other.functionCount) {
			return false;
		}
		if (id != other.id) {
			return false;
		}
		if (stepping != other.stepping) {
			return false;
		}
		if (typeName == null) {
			if (other.typeName != null) {
				return false;
			}
		} else if (!typeName.equals(other.typeName)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return this.getTypeName();
	}

	// Constructors

	/** default constructor */
	public HibernateLocomotiveType() {
	}

	/** minimal constructor */
	public HibernateLocomotiveType(final int id, final String typeName) {
		this.id = id;
		this.typeName = typeName;
	}

	/** full constructor */
	public HibernateLocomotiveType(final int id, final String typeName,
			final SortedSet<HibernateLocomotive> locomotives) {
		this.id = id;
		this.typeName = typeName;
		this.locomotives = locomotives;
	}

	// Property accessors

	@Id
	@GeneratedValue
	@Column(name = "id", unique = true, nullable = false, insertable = true, updatable = true)
	public int getId() {
		return this.id;
	}

	public void setId(final int id) {
		this.id = id;
	}

	@Column(name = "type_name", unique = false, nullable = false, insertable = true, updatable = true)
	public String getTypeName() {
		return this.typeName;
	}

	public void setTypeName(final String typeName) {
		this.typeName = typeName;
	}

	@Column(name = "drivingSteps", unique = false, nullable = false, insertable = true, updatable = true)
	public int getDrivingSteps() {
		return this.drivingSteps;
	}

	public void setDrivingSteps(final int drivingSteps) {
		this.drivingSteps = drivingSteps;
	}

	@Column(name = "stepping", unique = false, nullable = false, insertable = true, updatable = true)
	public int getStepping() {
		return this.stepping;
	}

	public void setStepping(final int stepping) {
		this.stepping = stepping;
	}

	@Column(name = "functionCount", unique = false, nullable = false, insertable = true, updatable = true)
	public int getFunctionCount() {
		return this.functionCount;
	}

	public void setFunctionCount(final int functionCount) {
		this.functionCount = functionCount;
	}

	@Sort(type = SortType.NATURAL)
	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.EAGER, mappedBy = "locomotiveType")
	public SortedSet<HibernateLocomotive> getLocomotives() {
		return this.locomotives;
	}

	@Sort(type = SortType.NATURAL)
	public void setLocomotives(final SortedSet<HibernateLocomotive> locomotives) {
		this.locomotives = locomotives;
	}

}

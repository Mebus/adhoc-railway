
AdHoc-MaerklinGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000038f  00800064  00800064  00000e6c  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001191  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	7e c4       	rjmp	.+2300   	; 0x90a <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	1c c3       	rjmp	.+1592   	; 0x64c <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	0d c6       	rjmp	.+3098   	; 0xc32 <__vector_11>
  18:	43 c6       	rjmp	.+3206   	; 0xca0 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ed       	ldi	r30, 0xD4	; 212
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	13 e0       	ldi	r17, 0x03	; 3
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3f       	cpi	r26, 0xF3	; 243
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	04 d5       	rcall	.+2568   	; 0xa62 <main>
  5a:	ba c6       	rjmp	.+3444   	; 0xdd0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <debug_init>:
 */

#include "debug.h"

void debug_init() {
	RED_GREEN_DDR |= (1 << GREEN_LED) | (1 << RED_LED);
  5e:	84 b3       	in	r24, 0x14	; 20
  60:	80 63       	ori	r24, 0x30	; 48
  62:	84 bb       	out	0x14, r24	; 20
}
  64:	08 95       	ret

00000066 <flash_twice_green>:

void flash_twice_green() {
	RED_GREEN_PORT |= (1 << GREEN_LED);
  66:	ac 9a       	sbi	0x15, 4	; 21
  68:	28 ee       	ldi	r18, 0xE8	; 232
  6a:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6c:	40 e9       	ldi	r20, 0x90	; 144
  6e:	51 e0       	ldi	r21, 0x01	; 1
  70:	ca 01       	movw	r24, r20
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <flash_twice_green+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  76:	21 50       	subi	r18, 0x01	; 1
  78:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7a:	d1 f7       	brne	.-12     	; 0x70 <flash_twice_green+0xa>
	_delay_ms(100);
	RED_GREEN_PORT &= ~(1 << GREEN_LED);
  7c:	ac 98       	cbi	0x15, 4	; 21
  7e:	28 ee       	ldi	r18, 0xE8	; 232
  80:	33 e0       	ldi	r19, 0x03	; 3
  82:	40 e9       	ldi	r20, 0x90	; 144
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	ca 01       	movw	r24, r20
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <flash_twice_green+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d1 f7       	brne	.-12     	; 0x86 <flash_twice_green+0x20>
	_delay_ms(100);
	RED_GREEN_PORT |= (1 << GREEN_LED);
  92:	ac 9a       	sbi	0x15, 4	; 21
  94:	28 ee       	ldi	r18, 0xE8	; 232
  96:	33 e0       	ldi	r19, 0x03	; 3
  98:	40 e9       	ldi	r20, 0x90	; 144
  9a:	51 e0       	ldi	r21, 0x01	; 1
  9c:	ca 01       	movw	r24, r20
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <flash_twice_green+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d1 f7       	brne	.-12     	; 0x9c <flash_twice_green+0x36>
	_delay_ms(100);
	RED_GREEN_PORT &= ~(1 << GREEN_LED);
  a8:	ac 98       	cbi	0x15, 4	; 21
}
  aa:	08 95       	ret

000000ac <flash_once_green>:
void flash_once_green() {
	RED_GREEN_PORT |= (1 << GREEN_LED);
  ac:	ac 9a       	sbi	0x15, 4	; 21
  ae:	28 ee       	ldi	r18, 0xE8	; 232
  b0:	33 e0       	ldi	r19, 0x03	; 3
  b2:	40 e9       	ldi	r20, 0x90	; 144
  b4:	51 e0       	ldi	r21, 0x01	; 1
  b6:	ca 01       	movw	r24, r20
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <flash_once_green+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c0:	d1 f7       	brne	.-12     	; 0xb6 <flash_once_green+0xa>
	_delay_ms(100);
	RED_GREEN_PORT &= ~(1 << GREEN_LED);
  c2:	ac 98       	cbi	0x15, 4	; 21
  c4:	28 ee       	ldi	r18, 0xE8	; 232
  c6:	33 e0       	ldi	r19, 0x03	; 3
  c8:	40 e9       	ldi	r20, 0x90	; 144
  ca:	51 e0       	ldi	r21, 0x01	; 1
  cc:	ca 01       	movw	r24, r20
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <flash_once_green+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d1 f7       	brne	.-12     	; 0xcc <flash_once_green+0x20>
	_delay_ms(100);
}
  d8:	08 95       	ret

000000da <flash_once_green_quick>:
void flash_once_green_quick() {
	RED_GREEN_PORT |= (1 << GREEN_LED);
  da:	ac 9a       	sbi	0x15, 4	; 21
	RED_GREEN_PORT &= ~(1 << GREEN_LED);
  dc:	ac 98       	cbi	0x15, 4	; 21
}
  de:	08 95       	ret

000000e0 <flash_once_red_quick>:
void flash_once_red_quick() {
	RED_GREEN_PORT |= (1 << RED_LED);
  e0:	ad 9a       	sbi	0x15, 5	; 21
	RED_GREEN_PORT &= ~(1 << RED_LED);
  e2:	ad 98       	cbi	0x15, 5	; 21
}
  e4:	08 95       	ret

000000e6 <flash_twice_red>:
void flash_twice_red() {
	RED_GREEN_PORT |= (1 << RED_LED);
  e6:	ad 9a       	sbi	0x15, 5	; 21
  e8:	28 ee       	ldi	r18, 0xE8	; 232
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	40 e9       	ldi	r20, 0x90	; 144
  ee:	51 e0       	ldi	r21, 0x01	; 1
  f0:	ca 01       	movw	r24, r20
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <flash_twice_red+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d1 f7       	brne	.-12     	; 0xf0 <flash_twice_red+0xa>
	_delay_ms(100);
	RED_GREEN_PORT &= ~(1 << RED_LED);
  fc:	ad 98       	cbi	0x15, 5	; 21
  fe:	28 ee       	ldi	r18, 0xE8	; 232
 100:	33 e0       	ldi	r19, 0x03	; 3
 102:	40 e9       	ldi	r20, 0x90	; 144
 104:	51 e0       	ldi	r21, 0x01	; 1
 106:	ca 01       	movw	r24, r20
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <flash_twice_red+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d1 f7       	brne	.-12     	; 0x106 <flash_twice_red+0x20>
	_delay_ms(100);
	RED_GREEN_PORT |= (1 << RED_LED);
 112:	ad 9a       	sbi	0x15, 5	; 21
 114:	28 ee       	ldi	r18, 0xE8	; 232
 116:	33 e0       	ldi	r19, 0x03	; 3
 118:	40 e9       	ldi	r20, 0x90	; 144
 11a:	51 e0       	ldi	r21, 0x01	; 1
 11c:	ca 01       	movw	r24, r20
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <flash_twice_red+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d1 f7       	brne	.-12     	; 0x11c <flash_twice_red+0x36>
	_delay_ms(100);
	RED_GREEN_PORT &= ~(1 << RED_LED);
 128:	ad 98       	cbi	0x15, 5	; 21
 12a:	28 ee       	ldi	r18, 0xE8	; 232
 12c:	33 e0       	ldi	r19, 0x03	; 3
 12e:	40 e9       	ldi	r20, 0x90	; 144
 130:	51 e0       	ldi	r21, 0x01	; 1
 132:	ca 01       	movw	r24, r20
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <flash_twice_red+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d1 f7       	brne	.-12     	; 0x132 <flash_twice_red+0x4c>
	_delay_ms(100);
}
 13e:	08 95       	ret

00000140 <flash_once_red>:
void flash_once_red() {
	RED_GREEN_PORT |= (1 << RED_LED);
 140:	ad 9a       	sbi	0x15, 5	; 21
 142:	28 ee       	ldi	r18, 0xE8	; 232
 144:	33 e0       	ldi	r19, 0x03	; 3
 146:	40 e9       	ldi	r20, 0x90	; 144
 148:	51 e0       	ldi	r21, 0x01	; 1
 14a:	ca 01       	movw	r24, r20
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <flash_once_red+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	21 50       	subi	r18, 0x01	; 1
 152:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 154:	d1 f7       	brne	.-12     	; 0x14a <flash_once_red+0xa>
	_delay_ms(100);
	RED_GREEN_PORT &= ~(1 << RED_LED);
 156:	ad 98       	cbi	0x15, 5	; 21
 158:	28 ee       	ldi	r18, 0xE8	; 232
 15a:	33 e0       	ldi	r19, 0x03	; 3
 15c:	40 e9       	ldi	r20, 0x90	; 144
 15e:	51 e0       	ldi	r21, 0x01	; 1
 160:	ca 01       	movw	r24, r20
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <flash_once_red+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 166:	21 50       	subi	r18, 0x01	; 1
 168:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	d1 f7       	brne	.-12     	; 0x160 <flash_once_red+0x20>
	_delay_ms(100);
}
 16c:	08 95       	ret

0000016e <red_led_on>:

void red_led_on() {
	RED_GREEN_PORT |= (1 << RED_LED);
 16e:	ad 9a       	sbi	0x15, 5	; 21
}
 170:	08 95       	ret

00000172 <red_led_off>:
void red_led_off() {
	RED_GREEN_PORT &= ~(1 << RED_LED);
 172:	ad 98       	cbi	0x15, 5	; 21
}
 174:	08 95       	ret

00000176 <green_led_on>:
void green_led_on() {
	RED_GREEN_PORT |= (1 << GREEN_LED);
 176:	ac 9a       	sbi	0x15, 4	; 21
}
 178:	08 95       	ret

0000017a <green_led_off>:
void green_led_off() {
	RED_GREEN_PORT &= ~(1 << GREEN_LED);
 17a:	ac 98       	cbi	0x15, 4	; 21
}
 17c:	08 95       	ret

0000017e <fifo_init>:
 */

#include "fifo.h"

void fifo_init (fifo_t *f, uint8_t *buffer, const uint8_t size)
{
 17e:	fc 01       	movw	r30, r24
	f->count = 0;
 180:	10 82       	st	Z, r1
	f->pread = f->pwrite = buffer;
 182:	75 83       	std	Z+5, r23	; 0x05
 184:	64 83       	std	Z+4, r22	; 0x04
 186:	73 83       	std	Z+3, r23	; 0x03
 188:	62 83       	std	Z+2, r22	; 0x02
	f->read2end = f->write2end = f->size = size;
 18a:	41 83       	std	Z+1, r20	; 0x01
 18c:	47 83       	std	Z+7, r20	; 0x07
 18e:	46 83       	std	Z+6, r20	; 0x06
}
 190:	08 95       	ret

00000192 <fifo_put>:

uint8_t fifo_put (fifo_t *f, const uint8_t data)
{
 192:	fc 01       	movw	r30, r24
extern uint8_t fifo_get_size(fifo_t*);

static inline uint8_t
_inline_fifo_put (fifo_t *f, const uint8_t data)
{
	if (f->count >= f->size)
 194:	90 81       	ld	r25, Z
 196:	81 81       	ldd	r24, Z+1	; 0x01
 198:	98 17       	cp	r25, r24
 19a:	a0 f4       	brcc	.+40     	; 0x1c4 <fifo_put+0x32>
		return 0;

	uint8_t * pwrite = f->pwrite;

	*(pwrite++) = data;
 19c:	a4 81       	ldd	r26, Z+4	; 0x04
 19e:	b5 81       	ldd	r27, Z+5	; 0x05
 1a0:	6d 93       	st	X+, r22

	uint8_t write2end = f->write2end;
 1a2:	87 81       	ldd	r24, Z+7	; 0x07

	if (--write2end == 0)
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	19 f4       	brne	.+6      	; 0x1ae <fifo_put+0x1c>
	{
		write2end = f->size;
 1a8:	81 81       	ldd	r24, Z+1	; 0x01
		pwrite -= write2end;
 1aa:	a8 1b       	sub	r26, r24
 1ac:	b1 09       	sbc	r27, r1
	}

	f->write2end = write2end;
 1ae:	87 83       	std	Z+7, r24	; 0x07
	f->pwrite = pwrite;
 1b0:	b5 83       	std	Z+5, r27	; 0x05
 1b2:	a4 83       	std	Z+4, r26	; 0x04

	uint8_t sreg = SREG;
 1b4:	9f b7       	in	r25, 0x3f	; 63
	cli();
 1b6:	f8 94       	cli
	f->count++;
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 83       	st	Z, r24
	SREG = sreg;
 1be:	9f bf       	out	0x3f, r25	; 63
 1c0:	81 e0       	ldi	r24, 0x01	; 1
	return _inline_fifo_put (f, data);
}
 1c2:	08 95       	ret
extern uint8_t fifo_get_size(fifo_t*);

static inline uint8_t
_inline_fifo_put (fifo_t *f, const uint8_t data)
{
	if (f->count >= f->size)
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <fifo_get_wait>:

uint8_t fifo_get_wait (fifo_t *f)
{
 1c8:	fc 01       	movw	r30, r24
	while (!f->count);
 1ca:	80 81       	ld	r24, Z
 1cc:	88 23       	and	r24, r24
 1ce:	e9 f3       	breq	.-6      	; 0x1ca <fifo_get_wait+0x2>

static inline uint8_t
_inline_fifo_get (fifo_t *f)
{
	uint8_t *pread = f->pread;
	uint8_t data = *(pread++);
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	2d 91       	ld	r18, X+
	uint8_t read2end = f->read2end;
 1d6:	86 81       	ldd	r24, Z+6	; 0x06

	if (--read2end == 0)
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	19 f4       	brne	.+6      	; 0x1e2 <fifo_get_wait+0x1a>
	{
		read2end = f->size;
 1dc:	81 81       	ldd	r24, Z+1	; 0x01
		pread -= read2end;
 1de:	a8 1b       	sub	r26, r24
 1e0:	b1 09       	sbc	r27, r1
	}

	f->pread = pread;
 1e2:	b3 83       	std	Z+3, r27	; 0x03
 1e4:	a2 83       	std	Z+2, r26	; 0x02
	f->read2end = read2end;
 1e6:	86 83       	std	Z+6, r24	; 0x06

	uint8_t sreg = SREG;
 1e8:	9f b7       	in	r25, 0x3f	; 63
	cli();
 1ea:	f8 94       	cli
	f->count--;
 1ec:	80 81       	ld	r24, Z
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	80 83       	st	Z, r24
	SREG = sreg;
 1f2:	9f bf       	out	0x3f, r25	; 63

	return _inline_fifo_get (f);
}
 1f4:	82 2f       	mov	r24, r18
 1f6:	08 95       	ret

000001f8 <fifo_get_nowait>:

int fifo_get_nowait (fifo_t *f)
{
 1f8:	fc 01       	movw	r30, r24
	if (!f->count)		return -1;
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	b1 f0       	breq	.+44     	; 0x22c <fifo_get_nowait+0x34>

static inline uint8_t
_inline_fifo_get (fifo_t *f)
{
	uint8_t *pread = f->pread;
	uint8_t data = *(pread++);
 200:	a2 81       	ldd	r26, Z+2	; 0x02
 202:	b3 81       	ldd	r27, Z+3	; 0x03
 204:	2d 91       	ld	r18, X+
	uint8_t read2end = f->read2end;
 206:	86 81       	ldd	r24, Z+6	; 0x06

	if (--read2end == 0)
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	61 f0       	breq	.+24     	; 0x224 <fifo_get_nowait+0x2c>
	{
		read2end = f->size;
		pread -= read2end;
	}

	f->pread = pread;
 20c:	b3 83       	std	Z+3, r27	; 0x03
 20e:	a2 83       	std	Z+2, r26	; 0x02
	f->read2end = read2end;
 210:	86 83       	std	Z+6, r24	; 0x06

	uint8_t sreg = SREG;
 212:	9f b7       	in	r25, 0x3f	; 63
	cli();
 214:	f8 94       	cli
	f->count--;
 216:	80 81       	ld	r24, Z
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	80 83       	st	Z, r24
	SREG = sreg;
 21c:	9f bf       	out	0x3f, r25	; 63

	return (int) _inline_fifo_get (f);
 21e:	30 e0       	ldi	r19, 0x00	; 0
}
 220:	c9 01       	movw	r24, r18
 222:	08 95       	ret
	uint8_t data = *(pread++);
	uint8_t read2end = f->read2end;

	if (--read2end == 0)
	{
		read2end = f->size;
 224:	81 81       	ldd	r24, Z+1	; 0x01
		pread -= read2end;
 226:	a8 1b       	sub	r26, r24
 228:	b1 09       	sbc	r27, r1
 22a:	f0 cf       	rjmp	.-32     	; 0x20c <fifo_get_nowait+0x14>
	return _inline_fifo_get (f);
}

int fifo_get_nowait (fifo_t *f)
{
	if (!f->count)		return -1;
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	3f ef       	ldi	r19, 0xFF	; 255

	return (int) _inline_fifo_get (f);
}
 230:	c9 01       	movw	r24, r18
 232:	08 95       	ret

00000234 <fifo_get_size>:


uint8_t fifo_get_size(fifo_t *f) {
 234:	fc 01       	movw	r30, r24
	return f->count;
 236:	80 81       	ld	r24, Z
}
 238:	08 95       	ret

0000023a <process_solenoid_cmd>:
		uart_transmit_poll('l');
		uart_transmit_poll('\n');
	}
}

void process_solenoid_cmd(unsigned char* solenoid_cmd) {
 23a:	1f 93       	push	r17
 23c:	bc 01       	movw	r22, r24
	uint8_t t = solenoid_cmd[1] - 1;
	unsigned char address = locoData[t].address;
	unsigned char port = portData[solenoid_cmd[2]];
 23e:	dc 01       	movw	r26, r24
 240:	12 96       	adiw	r26, 0x02	; 2
 242:	ec 91       	ld	r30, X
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	e6 5f       	subi	r30, 0xF6	; 246
 248:	fc 4f       	sbci	r31, 0xFC	; 252
 24a:	10 81       	ld	r17, Z
	//unsigned char activate = solenoid_cmd[3];

	solenoidData[solenoidDataIdxInsert].address = address;
 24c:	80 91 69 00 	lds	r24, 0x0069
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	d9 01       	movw	r26, r18
 256:	aa 0f       	add	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	a2 0f       	add	r26, r18
 25c:	b3 1f       	adc	r27, r19
 25e:	ad 01       	movw	r20, r26
 260:	4e 5d       	subi	r20, 0xDE	; 222
 262:	5c 4f       	sbci	r21, 0xFC	; 252
 264:	fb 01       	movw	r30, r22
 266:	21 81       	ldd	r18, Z+1	; 0x01
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f9 01       	movw	r30, r18
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e2 1b       	sub	r30, r18
 27c:	f3 0b       	sbc	r31, r19
 27e:	e2 59       	subi	r30, 0x92	; 146
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	90 81       	ld	r25, Z
 284:	fa 01       	movw	r30, r20
 286:	90 83       	st	Z, r25
	solenoidData[solenoidDataIdxInsert].port = port;
 288:	11 83       	std	Z+1, r17	; 0x01
	solenoidData[solenoidDataIdxInsert].active = 0;
 28a:	ac 5d       	subi	r26, 0xDC	; 220
 28c:	bc 4f       	sbci	r27, 0xFC	; 252
 28e:	9c 91       	ld	r25, X
	solenoidData[solenoidDataIdxInsert].timerDetected = 0;
	solenoidData[solenoidDataIdxInsert].deactivate = 0;
 290:	98 7f       	andi	r25, 0xF8	; 248
 292:	9c 93       	st	X, r25

	solenoidDataIdxInsert++;
	solenoidDataIdxInsert = solenoidDataIdxInsert % MAX_SOLENOID_QUEUE;
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	64 e1       	ldi	r22, 0x14	; 20
 298:	68 d5       	rcall	.+2768   	; 0xd6a <__udivmodqi4>
 29a:	90 93 69 00 	sts	0x0069, r25
 29e:	28 ee       	ldi	r18, 0xE8	; 232
 2a0:	33 e0       	ldi	r19, 0x03	; 3
 2a2:	40 e9       	ldi	r20, 0x90	; 144
 2a4:	51 e0       	ldi	r21, 0x01	; 1
 2a6:	ca 01       	movw	r24, r20
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <process_solenoid_cmd+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <process_solenoid_cmd+0x6c>

	_delay_ms(100);
	newSolenoid = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 6d 00 	sts	0x006D, r24
}
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret

000002bc <process_loco_cmd>:

void process_loco_cmd(unsigned char* loco_cmd) {
 2bc:	fc 01       	movw	r30, r24
	unsigned char functions = loco_cmd[3];
	unsigned char config = loco_cmd[4];

	unsigned char address = loco_cmd[1];
	int8_t speed = loco_cmd[2];
 2be:	a2 81       	ldd	r26, Z+2	; 0x02
	uint8_t t = address - 1;
 2c0:	41 81       	ldd	r20, Z+1	; 0x01
 2c2:	41 50       	subi	r20, 0x01	; 1
	locoData[t].active = (config >> 7) & 1;
 2c4:	84 2f       	mov	r24, r20
 2c6:	90 e0       	ldi	r25, 0x00	; 0
	locoData[t].isNewProtocol = (config >> 6) & 1;
	locoData[t].active = 1;
 2c8:	9c 01       	movw	r18, r24
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	28 1b       	sub	r18, r24
 2d8:	39 0b       	sbc	r19, r25
 2da:	f9 01       	movw	r30, r18
 2dc:	ec 58       	subi	r30, 0x8C	; 140
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
	locoData[t].isNewProtocol = 0;
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	80 83       	st	Z, r24
	if (locoData[t].isNewProtocol) {
		// NEW protocol
	} else {
		// OLD protocol (DELTA)

		if (speed < 0) {
 2e8:	a7 fd       	sbrc	r26, 7
 2ea:	1f c0       	rjmp	.+62     	; 0x32a <process_loco_cmd+0x6e>
			locoData[t].speed = deltaSpeedData[1];
		} else if (speed == 0) {
 2ec:	aa 23       	and	r26, r26
 2ee:	b1 f0       	breq	.+44     	; 0x31c <process_loco_cmd+0x60>
			locoData[t].speed = deltaSpeedData[0];
		} else {
			locoData[t].speed = deltaSpeedData[speed + 2];
 2f0:	f9 01       	movw	r30, r18
 2f2:	e2 59       	subi	r30, 0x92	; 146
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	bb 27       	eor	r27, r27
 2f8:	a7 fd       	sbrc	r26, 7
 2fa:	b0 95       	com	r27
 2fc:	ae 5e       	subi	r26, 0xEE	; 238
 2fe:	bc 4f       	sbci	r27, 0xFC	; 252
 300:	12 96       	adiw	r26, 0x02	; 2
 302:	8c 91       	ld	r24, X
 304:	81 83       	std	Z+1, r24	; 0x01
		}
	}
	newLoco = &locoData[t];
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	48 9f       	mul	r20, r24
 30a:	c0 01       	movw	r24, r0
 30c:	11 24       	eor	r1, r1
 30e:	82 59       	subi	r24, 0x92	; 146
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	90 93 67 00 	sts	0x0067, r25
 316:	80 93 66 00 	sts	0x0066, r24

}
 31a:	08 95       	ret
		// OLD protocol (DELTA)

		if (speed < 0) {
			locoData[t].speed = deltaSpeedData[1];
		} else if (speed == 0) {
			locoData[t].speed = deltaSpeedData[0];
 31c:	f9 01       	movw	r30, r18
 31e:	e2 59       	subi	r30, 0x92	; 146
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 91 12 03 	lds	r24, 0x0312
 326:	81 83       	std	Z+1, r24	; 0x01
 328:	ee cf       	rjmp	.-36     	; 0x306 <process_loco_cmd+0x4a>
		// NEW protocol
	} else {
		// OLD protocol (DELTA)

		if (speed < 0) {
			locoData[t].speed = deltaSpeedData[1];
 32a:	f9 01       	movw	r30, r18
 32c:	e2 59       	subi	r30, 0x92	; 146
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	80 91 13 03 	lds	r24, 0x0313
 334:	81 83       	std	Z+1, r24	; 0x01
 336:	e7 cf       	rjmp	.-50     	; 0x306 <process_loco_cmd+0x4a>

00000338 <prepareDataForPWM>:
	}
	newLoco = &locoData[t];

}

void prepareDataForPWM() {
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29

	unsigned char queueIdxLoc = 0; // = (pwmQueueIdx + 1) % 2;

	if (solenoidDataIdxInsert != solenoidDataIdxPop && solenoidToDeactivate == -1) {
 344:	10 91 6a 00 	lds	r17, 0x006A
 348:	80 91 69 00 	lds	r24, 0x0069
 34c:	81 17       	cp	r24, r17
 34e:	09 f4       	brne	.+2      	; 0x352 <prepareDataForPWM+0x1a>
 350:	f2 c0       	rjmp	.+484    	; 0x536 <__stack+0xd7>
 352:	80 91 62 00 	lds	r24, 0x0062
 356:	8f 3f       	cpi	r24, 0xFF	; 255
 358:	09 f4       	brne	.+2      	; 0x35c <prepareDataForPWM+0x24>
 35a:	79 c0       	rjmp	.+242    	; 0x44e <prepareDataForPWM+0x116>

	} else if (solenoidToDeactivate != -1) {
		//if (newSolenoid  == 1) {

		// there is a new solenoid to deactivate!!
		unsigned char address = solenoidData[solenoidToDeactivate].address;
 35c:	68 2f       	mov	r22, r24
 35e:	77 27       	eor	r23, r23
 360:	67 fd       	sbrc	r22, 7
 362:	70 95       	com	r23
		unsigned char port = solenoidData[solenoidToDeactivate].port;
 364:	8b 01       	movw	r16, r22
 366:	00 0f       	add	r16, r16
 368:	11 1f       	adc	r17, r17
 36a:	f8 01       	movw	r30, r16
 36c:	e6 0f       	add	r30, r22
 36e:	f7 1f       	adc	r31, r23
 370:	ee 5d       	subi	r30, 0xDE	; 222
 372:	fc 4f       	sbci	r31, 0xFC	; 252
 374:	f1 80       	ldd	r15, Z+1	; 0x01
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	ae e9       	ldi	r26, 0x9E	; 158
 37e:	b2 e0       	ldi	r27, 0x02	; 2
 380:	fd 01       	movw	r30, r26
 382:	27 e0       	ldi	r18, 0x07	; 7
 384:	30 e0       	ldi	r19, 0x00	; 0

		// address
		for (uint8_t i = 0; i < 8; i++)
			commandQueue[queueIdxLoc][i] = (address >> (7 - i)) & 1;
 386:	ca 01       	movw	r24, r20
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <prepareDataForPWM+0x58>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <prepareDataForPWM+0x54>
 394:	81 70       	andi	r24, 0x01	; 1
 396:	81 93       	st	Z+, r24
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	30 40       	sbci	r19, 0x00	; 0
		// there is a new solenoid to deactivate!!
		unsigned char address = solenoidData[solenoidToDeactivate].address;
		unsigned char port = solenoidData[solenoidToDeactivate].port;

		// address
		for (uint8_t i = 0; i < 8; i++)
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	e6 3a       	cpi	r30, 0xA6	; 166
 3a0:	f8 07       	cpc	r31, r24
 3a2:	89 f7       	brne	.-30     	; 0x386 <prepareDataForPWM+0x4e>
			commandQueue[queueIdxLoc][i] = (address >> (7 - i)) & 1;

		// unused
		commandQueue[queueIdxLoc][8] = 0;
 3a4:	10 82       	st	Z, r1
		commandQueue[queueIdxLoc][9] = 0;
 3a6:	11 82       	std	Z+1, r1	; 0x01
 3a8:	4f 2d       	mov	r20, r15
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	ef 01       	movw	r28, r30
 3ae:	22 96       	adiw	r28, 0x02	; 2
 3b0:	25 e0       	ldi	r18, 0x05	; 5
 3b2:	30 e0       	ldi	r19, 0x00	; 0

		// port
		for (uint8_t i = 0; i < 6; i++)
			commandQueue[queueIdxLoc][10 + i] = (port >> (5 - i)) & 1;
 3b4:	ca 01       	movw	r24, r20
 3b6:	02 2e       	mov	r0, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <prepareDataForPWM+0x86>
 3ba:	95 95       	asr	r25
 3bc:	87 95       	ror	r24
 3be:	0a 94       	dec	r0
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <prepareDataForPWM+0x82>
 3c2:	81 70       	andi	r24, 0x01	; 1
 3c4:	89 93       	st	Y+, r24
 3c6:	21 50       	subi	r18, 0x01	; 1
 3c8:	30 40       	sbci	r19, 0x00	; 0
		// unused
		commandQueue[queueIdxLoc][8] = 0;
		commandQueue[queueIdxLoc][9] = 0;

		// port
		for (uint8_t i = 0; i < 6; i++)
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	ce 3a       	cpi	r28, 0xAE	; 174
 3ce:	d8 07       	cpc	r29, r24
 3d0:	89 f7       	brne	.-30     	; 0x3b4 <prepareDataForPWM+0x7c>
			commandQueue[queueIdxLoc][10 + i] = (port >> (5 - i)) & 1;

		// if active deactivate port
		commandQueue[queueIdxLoc][16] = 0;
 3d2:	18 82       	st	Y, r1
		commandQueue[queueIdxLoc][17] = 0;
 3d4:	19 82       	std	Y+1, r1	; 0x01
		solenoidData[solenoidToDeactivate].active = 0;
 3d6:	f8 01       	movw	r30, r16
 3d8:	e6 0f       	add	r30, r22
 3da:	f7 1f       	adc	r31, r23
 3dc:	ec 5d       	subi	r30, 0xDC	; 220
 3de:	fc 4f       	sbci	r31, 0xFC	; 252
 3e0:	80 81       	ld	r24, Z
		solenoidData[solenoidToDeactivate].timerDetected = 0;
 3e2:	8c 7f       	andi	r24, 0xFC	; 252
 3e4:	80 83       	st	Z, r24

		// pause
		commandQueue[queueIdxLoc][18] = 2;
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	8a 83       	std	Y+2, r24	; 0x02
		commandQueue[queueIdxLoc][19] = 2;
 3ea:	8b 83       	std	Y+3, r24	; 0x03
		commandQueue[queueIdxLoc][20] = 2;
 3ec:	8c 83       	std	Y+4, r24	; 0x04
		commandQueue[queueIdxLoc][21] = 2;
 3ee:	8d 83       	std	Y+5, r24	; 0x05
		commandQueue[queueIdxLoc][22] = 2;
 3f0:	8e 83       	std	Y+6, r24	; 0x06
		commandQueue[queueIdxLoc][23] = 2;
 3f2:	8f 83       	std	Y+7, r24	; 0x07

		for (uint8_t i = 0; i < 24; i++)
			commandQueue[queueIdxLoc][24 + i] = commandQueue[queueIdxLoc][i];
 3f4:	8c 91       	ld	r24, X
 3f6:	58 96       	adiw	r26, 0x18	; 24
 3f8:	8c 93       	st	X, r24
 3fa:	58 97       	sbiw	r26, 0x18	; 24
 3fc:	11 96       	adiw	r26, 0x01	; 1
		commandQueue[queueIdxLoc][20] = 2;
		commandQueue[queueIdxLoc][21] = 2;
		commandQueue[queueIdxLoc][22] = 2;
		commandQueue[queueIdxLoc][23] = 2;

		for (uint8_t i = 0; i < 24; i++)
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	a6 3b       	cpi	r26, 0xB6	; 182
 402:	b8 07       	cpc	r27, r24
 404:	b9 f7       	brne	.-18     	; 0x3f4 <prepareDataForPWM+0xbc>
			commandQueue[queueIdxLoc][24 + i] = commandQueue[queueIdxLoc][i];

		commandQueue[queueIdxLoc][48] = 2;
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	58 96       	adiw	r26, 0x18	; 24
 40a:	8c 93       	st	X, r24
 40c:	58 97       	sbiw	r26, 0x18	; 24
		commandQueue[queueIdxLoc][49] = 2;
 40e:	59 96       	adiw	r26, 0x19	; 25
 410:	8c 93       	st	X, r24
 412:	59 97       	sbiw	r26, 0x19	; 25
		commandQueue[queueIdxLoc][50] = 2;
 414:	5a 96       	adiw	r26, 0x1a	; 26
 416:	8c 93       	st	X, r24
 418:	5a 97       	sbiw	r26, 0x1a	; 26
		commandQueue[queueIdxLoc][51] = 2;
 41a:	5b 96       	adiw	r26, 0x1b	; 27
 41c:	8c 93       	st	X, r24
 41e:	5b 97       	sbiw	r26, 0x1b	; 27
		commandQueue[queueIdxLoc][52] = 2;
 420:	5c 96       	adiw	r26, 0x1c	; 28
 422:	8c 93       	st	X, r24
 424:	5c 97       	sbiw	r26, 0x1c	; 28
		commandQueue[queueIdxLoc][53] = 2;
 426:	5d 96       	adiw	r26, 0x1d	; 29
 428:	8c 93       	st	X, r24
		solenoidToDeactivate = -1;
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	80 93 62 00 	sts	0x0062, r24
		pwm_mode = MODE_SOLENOID;
 430:	10 92 65 00 	sts	0x0065, r1
		isLocoCommand = 0;
 434:	10 92 60 00 	sts	0x0060, r1
		newSolenoid = 0;
 438:	10 92 6d 00 	sts	0x006D, r1
			pwm_mode = MODE_LOCO;
			isLocoCommand = 1;
		}
	}

	prepareNextData = 0;
 43c:	10 92 63 00 	sts	0x0063, r1

}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	08 95       	ret

	if (solenoidDataIdxInsert != solenoidDataIdxPop && solenoidToDeactivate == -1) {
		//if (newSolenoid == 1) {

		// there is a new solenoid to handle!!
		unsigned char address = solenoidData[solenoidDataIdxPop].address;
 44e:	61 2f       	mov	r22, r17
 450:	70 e0       	ldi	r23, 0x00	; 0
		unsigned char port = solenoidData[solenoidDataIdxPop].port;
 452:	7b 01       	movw	r14, r22
 454:	ee 0c       	add	r14, r14
 456:	ff 1c       	adc	r15, r15
 458:	f7 01       	movw	r30, r14
 45a:	e6 0f       	add	r30, r22
 45c:	f7 1f       	adc	r31, r23
 45e:	ee 5d       	subi	r30, 0xDE	; 222
 460:	fc 4f       	sbci	r31, 0xFC	; 252
 462:	01 81       	ldd	r16, Z+1	; 0x01
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	ae e9       	ldi	r26, 0x9E	; 158
 46c:	b2 e0       	ldi	r27, 0x02	; 2
 46e:	fd 01       	movw	r30, r26
 470:	27 e0       	ldi	r18, 0x07	; 7
 472:	30 e0       	ldi	r19, 0x00	; 0

		// address
		for (uint8_t i = 0; i < 8; i++)
			commandQueue[queueIdxLoc][i] = (address >> (7 - i)) & 1;
 474:	ca 01       	movw	r24, r20
 476:	02 2e       	mov	r0, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__stack+0x1f>
 47a:	95 95       	asr	r25
 47c:	87 95       	ror	r24
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <__stack+0x1b>
 482:	81 70       	andi	r24, 0x01	; 1
 484:	81 93       	st	Z+, r24
 486:	21 50       	subi	r18, 0x01	; 1
 488:	30 40       	sbci	r19, 0x00	; 0
		// there is a new solenoid to handle!!
		unsigned char address = solenoidData[solenoidDataIdxPop].address;
		unsigned char port = solenoidData[solenoidDataIdxPop].port;

		// address
		for (uint8_t i = 0; i < 8; i++)
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	e6 3a       	cpi	r30, 0xA6	; 166
 48e:	f8 07       	cpc	r31, r24
 490:	89 f7       	brne	.-30     	; 0x474 <__stack+0x15>
			commandQueue[queueIdxLoc][i] = (address >> (7 - i)) & 1;

		// unused
		commandQueue[queueIdxLoc][8] = 0;
 492:	10 82       	st	Z, r1
		commandQueue[queueIdxLoc][9] = 0;
 494:	11 82       	std	Z+1, r1	; 0x01
 496:	40 2f       	mov	r20, r16
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	ef 01       	movw	r28, r30
 49c:	22 96       	adiw	r28, 0x02	; 2
 49e:	25 e0       	ldi	r18, 0x05	; 5
 4a0:	30 e0       	ldi	r19, 0x00	; 0

		// port
		for (uint8_t i = 0; i < 6; i++)
			commandQueue[queueIdxLoc][10 + i] = (port >> (5 - i)) & 1;
 4a2:	ca 01       	movw	r24, r20
 4a4:	02 2e       	mov	r0, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__stack+0x4d>
 4a8:	95 95       	asr	r25
 4aa:	87 95       	ror	r24
 4ac:	0a 94       	dec	r0
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__stack+0x49>
 4b0:	81 70       	andi	r24, 0x01	; 1
 4b2:	89 93       	st	Y+, r24
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	30 40       	sbci	r19, 0x00	; 0
		// unused
		commandQueue[queueIdxLoc][8] = 0;
		commandQueue[queueIdxLoc][9] = 0;

		// port
		for (uint8_t i = 0; i < 6; i++)
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	ce 3a       	cpi	r28, 0xAE	; 174
 4bc:	d8 07       	cpc	r29, r24
 4be:	89 f7       	brne	.-30     	; 0x4a2 <__stack+0x43>
			commandQueue[queueIdxLoc][10 + i] = (port >> (5 - i)) & 1;

		// activate port
		commandQueue[queueIdxLoc][16] = 1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	88 83       	st	Y, r24
		commandQueue[queueIdxLoc][17] = 1;
 4c4:	89 83       	std	Y+1, r24	; 0x01
		solenoidData[solenoidDataIdxPop].active = 1;
 4c6:	f7 01       	movw	r30, r14
 4c8:	e6 0f       	add	r30, r22
 4ca:	f7 1f       	adc	r31, r23
 4cc:	ec 5d       	subi	r30, 0xDC	; 220
 4ce:	fc 4f       	sbci	r31, 0xFC	; 252
 4d0:	80 81       	ld	r24, Z
 4d2:	81 60       	ori	r24, 0x01	; 1
		solenoidData[solenoidDataIdxPop].timerDetected = 0;
 4d4:	8d 7f       	andi	r24, 0xFD	; 253
 4d6:	80 83       	st	Z, r24

		// pause
		commandQueue[queueIdxLoc][18] = 2;
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	8a 83       	std	Y+2, r24	; 0x02
		commandQueue[queueIdxLoc][19] = 2;
 4dc:	8b 83       	std	Y+3, r24	; 0x03
		commandQueue[queueIdxLoc][20] = 2;
 4de:	8c 83       	std	Y+4, r24	; 0x04
		commandQueue[queueIdxLoc][21] = 2;
 4e0:	8d 83       	std	Y+5, r24	; 0x05
		commandQueue[queueIdxLoc][22] = 2;
 4e2:	8e 83       	std	Y+6, r24	; 0x06
		commandQueue[queueIdxLoc][23] = 2;
 4e4:	8f 83       	std	Y+7, r24	; 0x07

		for (uint8_t i = 0; i < 24; i++)
			commandQueue[queueIdxLoc][24 + i] = commandQueue[queueIdxLoc][i];
 4e6:	8c 91       	ld	r24, X
 4e8:	58 96       	adiw	r26, 0x18	; 24
 4ea:	8c 93       	st	X, r24
 4ec:	58 97       	sbiw	r26, 0x18	; 24
 4ee:	11 96       	adiw	r26, 0x01	; 1
		commandQueue[queueIdxLoc][20] = 2;
		commandQueue[queueIdxLoc][21] = 2;
		commandQueue[queueIdxLoc][22] = 2;
		commandQueue[queueIdxLoc][23] = 2;

		for (uint8_t i = 0; i < 24; i++)
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	a6 3b       	cpi	r26, 0xB6	; 182
 4f4:	b8 07       	cpc	r27, r24
 4f6:	b9 f7       	brne	.-18     	; 0x4e6 <__stack+0x87>
			commandQueue[queueIdxLoc][24 + i] = commandQueue[queueIdxLoc][i];

		commandQueue[queueIdxLoc][48] = 2;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	58 96       	adiw	r26, 0x18	; 24
 4fc:	8c 93       	st	X, r24
 4fe:	58 97       	sbiw	r26, 0x18	; 24
		commandQueue[queueIdxLoc][49] = 2;
 500:	59 96       	adiw	r26, 0x19	; 25
 502:	8c 93       	st	X, r24
 504:	59 97       	sbiw	r26, 0x19	; 25
		commandQueue[queueIdxLoc][50] = 2;
 506:	5a 96       	adiw	r26, 0x1a	; 26
 508:	8c 93       	st	X, r24
 50a:	5a 97       	sbiw	r26, 0x1a	; 26
		commandQueue[queueIdxLoc][51] = 2;
 50c:	5b 96       	adiw	r26, 0x1b	; 27
 50e:	8c 93       	st	X, r24
 510:	5b 97       	sbiw	r26, 0x1b	; 27
		commandQueue[queueIdxLoc][52] = 2;
 512:	5c 96       	adiw	r26, 0x1c	; 28
 514:	8c 93       	st	X, r24
 516:	5c 97       	sbiw	r26, 0x1c	; 28
		commandQueue[queueIdxLoc][53] = 2;
 518:	5d 96       	adiw	r26, 0x1d	; 29
 51a:	8c 93       	st	X, r24

		solenoidDataIdxPop++;
		solenoidDataIdxPop = solenoidDataIdxPop % MAX_SOLENOID_QUEUE;
 51c:	81 2f       	mov	r24, r17
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	64 e1       	ldi	r22, 0x14	; 20
 522:	23 d4       	rcall	.+2118   	; 0xd6a <__udivmodqi4>
 524:	90 93 6a 00 	sts	0x006A, r25
		pwm_mode = MODE_SOLENOID;
 528:	10 92 65 00 	sts	0x0065, r1
		isLocoCommand = 0;
 52c:	10 92 60 00 	sts	0x0060, r1
		newSolenoid = 0;
 530:	10 92 6d 00 	sts	0x006D, r1
 534:	83 cf       	rjmp	.-250    	; 0x43c <prepareDataForPWM+0x104>

		//flash_once_red();

	} else if (solenoidToDeactivate != -1) {
 536:	80 91 62 00 	lds	r24, 0x0062
 53a:	8f 3f       	cpi	r24, 0xFF	; 255
 53c:	09 f0       	breq	.+2      	; 0x540 <__stack+0xe1>
 53e:	0e cf       	rjmp	.-484    	; 0x35c <prepareDataForPWM+0x24>
		isLocoCommand = 0;
		newSolenoid = 0;
	} else {
		struct LocoData* actualLoco = 0;

		if (newLoco != 0) {
 540:	e0 91 66 00 	lds	r30, 0x0066
 544:	f0 91 67 00 	lds	r31, 0x0067
 548:	30 97       	sbiw	r30, 0x00	; 0
 54a:	09 f4       	brne	.+2      	; 0x54e <__stack+0xef>
 54c:	58 c0       	rjmp	.+176    	; 0x5fe <__stack+0x19f>
			// there's a new loco command
			actualLoco = newLoco;
			newLoco = 0;
 54e:	10 92 67 00 	sts	0x0067, r1
 552:	10 92 66 00 	sts	0x0066, r1
			}

		}
		if (actualLoco != 0) {
			unsigned char address = actualLoco->address;
			unsigned char speed = actualLoco->speed;
 556:	61 81       	ldd	r22, Z+1	; 0x01
 558:	80 81       	ld	r24, Z
 55a:	48 2f       	mov	r20, r24
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	ee e9       	ldi	r30, 0x9E	; 158
 560:	f2 e0       	ldi	r31, 0x02	; 2
 562:	df 01       	movw	r26, r30
 564:	27 e0       	ldi	r18, 0x07	; 7
 566:	30 e0       	ldi	r19, 0x00	; 0

			// address
			for (uint8_t i = 0; i < 8; i++)
				commandQueue[queueIdxLoc][i] = (address >> (7 - i)) & 1;
 568:	ca 01       	movw	r24, r20
 56a:	02 2e       	mov	r0, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x113>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <__stack+0x10f>
 576:	81 70       	andi	r24, 0x01	; 1
 578:	8d 93       	st	X+, r24
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	30 40       	sbci	r19, 0x00	; 0
		if (actualLoco != 0) {
			unsigned char address = actualLoco->address;
			unsigned char speed = actualLoco->speed;

			// address
			for (uint8_t i = 0; i < 8; i++)
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	a6 3a       	cpi	r26, 0xA6	; 166
 582:	b8 07       	cpc	r27, r24
 584:	89 f7       	brne	.-30     	; 0x568 <__stack+0x109>
				commandQueue[queueIdxLoc][i] = (address >> (7 - i)) & 1;

			// function
			commandQueue[queueIdxLoc][8] = 0;
 586:	1c 92       	st	X, r1
			commandQueue[queueIdxLoc][9] = 0;
 588:	11 96       	adiw	r26, 0x01	; 1
 58a:	1c 92       	st	X, r1
 58c:	11 97       	sbiw	r26, 0x01	; 1
 58e:	46 2f       	mov	r20, r22
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	12 96       	adiw	r26, 0x02	; 2
 594:	27 e0       	ldi	r18, 0x07	; 7
 596:	30 e0       	ldi	r19, 0x00	; 0

			// speed
			for (uint8_t i = 0; i < 8; i++)
				commandQueue[queueIdxLoc][10 + i] = (speed >> (7 - i)) & 1;
 598:	ca 01       	movw	r24, r20
 59a:	02 2e       	mov	r0, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__stack+0x143>
 59e:	95 95       	asr	r25
 5a0:	87 95       	ror	r24
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <__stack+0x13f>
 5a6:	81 70       	andi	r24, 0x01	; 1
 5a8:	8d 93       	st	X+, r24
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	30 40       	sbci	r19, 0x00	; 0
			// function
			commandQueue[queueIdxLoc][8] = 0;
			commandQueue[queueIdxLoc][9] = 0;

			// speed
			for (uint8_t i = 0; i < 8; i++)
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	a0 3b       	cpi	r26, 0xB0	; 176
 5b2:	b8 07       	cpc	r27, r24
 5b4:	89 f7       	brne	.-30     	; 0x598 <__stack+0x139>
				commandQueue[queueIdxLoc][10 + i] = (speed >> (7 - i)) & 1;

			// pause
			commandQueue[queueIdxLoc][18] = 2;
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	8c 93       	st	X, r24
			commandQueue[queueIdxLoc][19] = 2;
 5ba:	11 96       	adiw	r26, 0x01	; 1
 5bc:	8c 93       	st	X, r24
 5be:	11 97       	sbiw	r26, 0x01	; 1
			commandQueue[queueIdxLoc][20] = 2;
 5c0:	12 96       	adiw	r26, 0x02	; 2
 5c2:	8c 93       	st	X, r24
 5c4:	12 97       	sbiw	r26, 0x02	; 2
			commandQueue[queueIdxLoc][21] = 2;
 5c6:	13 96       	adiw	r26, 0x03	; 3
 5c8:	8c 93       	st	X, r24
 5ca:	13 97       	sbiw	r26, 0x03	; 3
			commandQueue[queueIdxLoc][22] = 2;
 5cc:	14 96       	adiw	r26, 0x04	; 4
 5ce:	8c 93       	st	X, r24
 5d0:	14 97       	sbiw	r26, 0x04	; 4
			commandQueue[queueIdxLoc][23] = 2;
 5d2:	15 96       	adiw	r26, 0x05	; 5
 5d4:	8c 93       	st	X, r24

			for (uint8_t i = 0; i < 24; i++)
				commandQueue[queueIdxLoc][24 + i] =
 5d6:	80 81       	ld	r24, Z
 5d8:	80 8f       	std	Z+24, r24	; 0x18
 5da:	31 96       	adiw	r30, 0x01	; 1
			commandQueue[queueIdxLoc][20] = 2;
			commandQueue[queueIdxLoc][21] = 2;
			commandQueue[queueIdxLoc][22] = 2;
			commandQueue[queueIdxLoc][23] = 2;

			for (uint8_t i = 0; i < 24; i++)
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	e6 3b       	cpi	r30, 0xB6	; 182
 5e0:	f8 07       	cpc	r31, r24
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__stack+0x177>
				commandQueue[queueIdxLoc][24 + i] =
						commandQueue[queueIdxLoc][i];

			commandQueue[queueIdxLoc][48] = 2;
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	80 8f       	std	Z+24, r24	; 0x18
			commandQueue[queueIdxLoc][49] = 2;
 5e8:	81 8f       	std	Z+25, r24	; 0x19
			commandQueue[queueIdxLoc][50] = 2;
 5ea:	82 8f       	std	Z+26, r24	; 0x1a
			commandQueue[queueIdxLoc][51] = 2;
 5ec:	83 8f       	std	Z+27, r24	; 0x1b
			commandQueue[queueIdxLoc][52] = 2;
 5ee:	84 8f       	std	Z+28, r24	; 0x1c
			commandQueue[queueIdxLoc][53] = 2;
 5f0:	85 8f       	std	Z+29, r24	; 0x1d
			pwm_mode = MODE_LOCO;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	80 93 65 00 	sts	0x0065, r24
			isLocoCommand = 1;
 5f8:	80 93 60 00 	sts	0x0060, r24
 5fc:	1f cf       	rjmp	.-450    	; 0x43c <prepareDataForPWM+0x104>
			// there's a new loco command
			actualLoco = newLoco;
			newLoco = 0;
		} else {
			// do a loco refresh
			uint8_t i = (currentLocoIdx + 1) % 80;
 5fe:	80 91 61 00 	lds	r24, 0x0061
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	01 c0       	rjmp	.+2      	; 0x608 <__stack+0x1a9>
				if (locoData[i].active == 1) {
					currentLocoIdx = i;
					actualLoco = &locoData[i];
					break;
				}
				i = (i + 1) % 80;
 606:	c9 01       	movw	r24, r18
			// there's a new loco command
			actualLoco = newLoco;
			newLoco = 0;
		} else {
			// do a loco refresh
			uint8_t i = (currentLocoIdx + 1) % 80;
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	60 e5       	ldi	r22, 0x50	; 80
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	b9 d3       	rcall	.+1906   	; 0xd82 <__divmodhi4>
 610:	98 2f       	mov	r25, r24

			while (1) {
				//transmitUSART('s');
				if (locoData[i].active == 1) {
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	f9 01       	movw	r30, r18
 618:	ee 0f       	add	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	ee 0f       	add	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	e2 1b       	sub	r30, r18
 626:	f3 0b       	sbc	r31, r19
 628:	ec 58       	subi	r30, 0x8C	; 140
 62a:	ff 4f       	sbci	r31, 0xFF	; 255
 62c:	80 81       	ld	r24, Z
 62e:	81 ff       	sbrs	r24, 1
 630:	ea cf       	rjmp	.-44     	; 0x606 <__stack+0x1a7>
					currentLocoIdx = i;
 632:	90 93 61 00 	sts	0x0061, r25
					actualLoco = &locoData[i];
 636:	87 e0       	ldi	r24, 0x07	; 7
 638:	98 9f       	mul	r25, r24
 63a:	f0 01       	movw	r30, r0
 63c:	11 24       	eor	r1, r1
 63e:	e2 59       	subi	r30, 0x92	; 146
 640:	ff 4f       	sbci	r31, 0xFF	; 255
				}
				i = (i + 1) % 80;
			}

		}
		if (actualLoco != 0) {
 642:	09 f4       	brne	.+2      	; 0x646 <__stack+0x1e7>
 644:	fb ce       	rjmp	.-522    	; 0x43c <prepareDataForPWM+0x104>
 646:	87 cf       	rjmp	.-242    	; 0x556 <__stack+0xf7>

00000648 <checkForNewCommand>:
}

unsigned char checkForNewCommand() {

	return 1;
}
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	08 95       	ret

0000064c <__vector_9>:
}

// *** Interrupt Service Routine *****************************************

// Timer0 overflow interrupt handler (~65ms 4MHz@1024 precale factor)
ISR(TIMER0_OVF_vect) {
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
	timer0_interrupt = (timer0_interrupt + 1) % 4;
 65a:	80 91 64 00 	lds	r24, 0x0064
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	83 70       	andi	r24, 0x03	; 3
 664:	90 70       	andi	r25, 0x00	; 0
 666:	80 93 64 00 	sts	0x0064, r24
}
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <initPortData>:

/******* INIT DATA *********/

void initPortData() {

	portData[0] = 0;
 678:	10 92 0a 03 	sts	0x030A, r1
	portData[1] = 48;
 67c:	80 e3       	ldi	r24, 0x30	; 48
 67e:	80 93 0b 03 	sts	0x030B, r24
	portData[2] = 12;
 682:	8c e0       	ldi	r24, 0x0C	; 12
 684:	80 93 0c 03 	sts	0x030C, r24
	portData[3] = 60;
 688:	8c e3       	ldi	r24, 0x3C	; 60
 68a:	80 93 0d 03 	sts	0x030D, r24
	portData[4] = 3;
 68e:	83 e0       	ldi	r24, 0x03	; 3
 690:	80 93 0e 03 	sts	0x030E, r24
	portData[5] = 51;
 694:	83 e3       	ldi	r24, 0x33	; 51
 696:	80 93 0f 03 	sts	0x030F, r24
	portData[6] = 15;
 69a:	8f e0       	ldi	r24, 0x0F	; 15
 69c:	80 93 10 03 	sts	0x0310, r24
	portData[7] = 63;
 6a0:	8f e3       	ldi	r24, 0x3F	; 63
 6a2:	80 93 11 03 	sts	0x0311, r24

}
 6a6:	08 95       	ret

000006a8 <initLocoData>:
void initLocoData() {
 6a8:	ff 92       	push	r15
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17

	/*locoRefreshStart.locoData = 0;
	 locoRefreshStart.next = &locoRefreshEnd;
	 locoRefreshEnd.previous = &locoRefreshStart;*/

	deltaSpeedData[0] = 0;
 6ae:	10 92 12 03 	sts	0x0312, r1
	deltaSpeedData[1] = 192;
 6b2:	90 ec       	ldi	r25, 0xC0	; 192
 6b4:	90 93 13 03 	sts	0x0313, r25
	deltaSpeedData[2] = 48;
 6b8:	30 e3       	ldi	r19, 0x30	; 48
 6ba:	30 93 14 03 	sts	0x0314, r19
	deltaSpeedData[3] = 240;
 6be:	20 ef       	ldi	r18, 0xF0	; 240
 6c0:	20 93 15 03 	sts	0x0315, r18
	deltaSpeedData[4] = 12;
 6c4:	6c e0       	ldi	r22, 0x0C	; 12
 6c6:	60 93 16 03 	sts	0x0316, r22
	deltaSpeedData[5] = 204;
 6ca:	4c ec       	ldi	r20, 0xCC	; 204
 6cc:	40 93 17 03 	sts	0x0317, r20
	deltaSpeedData[6] = 60;
 6d0:	7c e3       	ldi	r23, 0x3C	; 60
 6d2:	70 93 18 03 	sts	0x0318, r23
	deltaSpeedData[7] = 252;
 6d6:	5c ef       	ldi	r21, 0xFC	; 252
 6d8:	50 93 19 03 	sts	0x0319, r21
	deltaSpeedData[8] = 3;
 6dc:	f3 e0       	ldi	r31, 0x03	; 3
 6de:	f0 93 1a 03 	sts	0x031A, r31
	deltaSpeedData[9] = 195;
 6e2:	e3 ec       	ldi	r30, 0xC3	; 195
 6e4:	e0 93 1b 03 	sts	0x031B, r30
	deltaSpeedData[10] = 51;
 6e8:	83 e3       	ldi	r24, 0x33	; 51
 6ea:	80 93 1c 03 	sts	0x031C, r24
	deltaSpeedData[11] = 243;
 6ee:	a3 ef       	ldi	r26, 0xF3	; 243
 6f0:	a0 93 1d 03 	sts	0x031D, r26
	deltaSpeedData[12] = 15;
 6f4:	bf e0       	ldi	r27, 0x0F	; 15
 6f6:	b0 93 1e 03 	sts	0x031E, r27
	deltaSpeedData[13] = 207;
 6fa:	1f ec       	ldi	r17, 0xCF	; 207
 6fc:	10 93 1f 03 	sts	0x031F, r17
	deltaSpeedData[14] = 63;
 700:	0f e3       	ldi	r16, 0x3F	; 63
 702:	00 93 20 03 	sts	0x0320, r16
	deltaSpeedData[15] = 255;
 706:	ff 24       	eor	r15, r15
 708:	fa 94       	dec	r15
 70a:	f0 92 21 03 	sts	0x0321, r15

	locoData[0].address = 192;
 70e:	90 93 6e 00 	sts	0x006E, r25
	locoData[1].address = 128;
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	80 93 75 00 	sts	0x0075, r24
	locoData[2].address = 48;
 718:	30 93 7c 00 	sts	0x007C, r19
	locoData[3].address = 240;
 71c:	20 93 83 00 	sts	0x0083, r18
	locoData[4].address = 176;
 720:	80 eb       	ldi	r24, 0xB0	; 176
 722:	80 93 8a 00 	sts	0x008A, r24
	locoData[5].address = 32;
 726:	80 e2       	ldi	r24, 0x20	; 32
 728:	80 93 91 00 	sts	0x0091, r24
	locoData[6].address = 224;
 72c:	80 ee       	ldi	r24, 0xE0	; 224
 72e:	80 93 98 00 	sts	0x0098, r24
	locoData[7].address = 160;
 732:	80 ea       	ldi	r24, 0xA0	; 160
 734:	80 93 9f 00 	sts	0x009F, r24
	locoData[8].address = 12;
 738:	60 93 a6 00 	sts	0x00A6, r22
	locoData[9].address = 204;
 73c:	40 93 ad 00 	sts	0x00AD, r20

	locoData[10].address = 140;
 740:	8c e8       	ldi	r24, 0x8C	; 140
 742:	80 93 b4 00 	sts	0x00B4, r24
	locoData[11].address = 60;
 746:	70 93 bb 00 	sts	0x00BB, r23
	locoData[12].address = 252;
 74a:	50 93 c2 00 	sts	0x00C2, r21
	locoData[13].address = 188;
 74e:	8c eb       	ldi	r24, 0xBC	; 188
 750:	80 93 c9 00 	sts	0x00C9, r24
	locoData[14].address = 44;
 754:	8c e2       	ldi	r24, 0x2C	; 44
 756:	80 93 d0 00 	sts	0x00D0, r24
	locoData[15].address = 236;
 75a:	8c ee       	ldi	r24, 0xEC	; 236
 75c:	80 93 d7 00 	sts	0x00D7, r24
	locoData[16].address = 172;
 760:	8c ea       	ldi	r24, 0xAC	; 172
 762:	80 93 de 00 	sts	0x00DE, r24
	locoData[17].address = 8;
 766:	88 e0       	ldi	r24, 0x08	; 8
 768:	80 93 e5 00 	sts	0x00E5, r24
	locoData[18].address = 200;
 76c:	88 ec       	ldi	r24, 0xC8	; 200
 76e:	80 93 ec 00 	sts	0x00EC, r24
	locoData[19].address = 136;
 772:	88 e8       	ldi	r24, 0x88	; 136
 774:	80 93 f3 00 	sts	0x00F3, r24
	locoData[20].address = 56;
 778:	88 e3       	ldi	r24, 0x38	; 56
 77a:	80 93 fa 00 	sts	0x00FA, r24
	locoData[21].address = 248;
 77e:	88 ef       	ldi	r24, 0xF8	; 248
 780:	80 93 01 01 	sts	0x0101, r24
	locoData[22].address = 184;
 784:	88 eb       	ldi	r24, 0xB8	; 184
 786:	80 93 08 01 	sts	0x0108, r24
	locoData[23].address = 40;
 78a:	88 e2       	ldi	r24, 0x28	; 40
 78c:	80 93 0f 01 	sts	0x010F, r24
	locoData[24].address = 232;
 790:	88 ee       	ldi	r24, 0xE8	; 232
 792:	80 93 16 01 	sts	0x0116, r24
	locoData[25].address = 168;
 796:	88 ea       	ldi	r24, 0xA8	; 168
 798:	80 93 1d 01 	sts	0x011D, r24
	locoData[26].address = 3;
 79c:	f0 93 24 01 	sts	0x0124, r31
	locoData[27].address = 195;
 7a0:	e0 93 2b 01 	sts	0x012B, r30
	locoData[28].address = 131;
 7a4:	83 e8       	ldi	r24, 0x83	; 131
 7a6:	80 93 32 01 	sts	0x0132, r24
	locoData[29].address = 34;
 7aa:	92 e2       	ldi	r25, 0x22	; 34
 7ac:	90 93 39 01 	sts	0x0139, r25
	locoData[30].address = 243;
 7b0:	a0 93 40 01 	sts	0x0140, r26
	locoData[31].address = 179;
 7b4:	83 eb       	ldi	r24, 0xB3	; 179
 7b6:	80 93 47 01 	sts	0x0147, r24
	locoData[32].address = 35;
 7ba:	83 e2       	ldi	r24, 0x23	; 35
 7bc:	80 93 4e 01 	sts	0x014E, r24
	locoData[33].address = 227;
 7c0:	83 ee       	ldi	r24, 0xE3	; 227
 7c2:	80 93 55 01 	sts	0x0155, r24
	locoData[34].address = 163;
 7c6:	83 ea       	ldi	r24, 0xA3	; 163
 7c8:	80 93 5c 01 	sts	0x015C, r24
	locoData[35].address = 15;
 7cc:	b0 93 63 01 	sts	0x0163, r27
	locoData[36].address = 207;
 7d0:	10 93 6a 01 	sts	0x016A, r17
	locoData[37].address = 143;
 7d4:	8f e8       	ldi	r24, 0x8F	; 143
 7d6:	80 93 71 01 	sts	0x0171, r24
	locoData[38].address = 63;
 7da:	00 93 78 01 	sts	0x0178, r16
	locoData[39].address = 255;
 7de:	f0 92 7f 01 	sts	0x017F, r15
	locoData[40].address = 191;
 7e2:	8f eb       	ldi	r24, 0xBF	; 191
 7e4:	80 93 86 01 	sts	0x0186, r24
	locoData[41].address = 47;
 7e8:	8f e2       	ldi	r24, 0x2F	; 47
 7ea:	80 93 8d 01 	sts	0x018D, r24
	locoData[42].address = 239;
 7ee:	8f ee       	ldi	r24, 0xEF	; 239
 7f0:	80 93 94 01 	sts	0x0194, r24
	locoData[43].address = 175;
 7f4:	8f ea       	ldi	r24, 0xAF	; 175
 7f6:	80 93 9b 01 	sts	0x019B, r24
	locoData[44].address = 11;
 7fa:	8b e0       	ldi	r24, 0x0B	; 11
 7fc:	80 93 a2 01 	sts	0x01A2, r24
	locoData[45].address = 203;
 800:	8b ec       	ldi	r24, 0xCB	; 203
 802:	80 93 a9 01 	sts	0x01A9, r24
	locoData[46].address = 139;
 806:	8b e8       	ldi	r24, 0x8B	; 139
 808:	80 93 b0 01 	sts	0x01B0, r24
	locoData[47].address = 59;
 80c:	8b e3       	ldi	r24, 0x3B	; 59
 80e:	80 93 b7 01 	sts	0x01B7, r24
	locoData[48].address = 251;
 812:	8b ef       	ldi	r24, 0xFB	; 251
 814:	80 93 be 01 	sts	0x01BE, r24
	locoData[49].address = 187;
 818:	8b eb       	ldi	r24, 0xBB	; 187
 81a:	80 93 c5 01 	sts	0x01C5, r24
	locoData[50].address = 43;
 81e:	8b e2       	ldi	r24, 0x2B	; 43
 820:	80 93 cc 01 	sts	0x01CC, r24
	locoData[51].address = 235;
 824:	8b ee       	ldi	r24, 0xEB	; 235
 826:	80 93 d3 01 	sts	0x01D3, r24
	locoData[52].address = 171;
 82a:	8b ea       	ldi	r24, 0xAB	; 171
 82c:	80 93 da 01 	sts	0x01DA, r24
	locoData[53].address = 2;
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	80 93 e1 01 	sts	0x01E1, r24
	locoData[54].address = 194;
 836:	82 ec       	ldi	r24, 0xC2	; 194
 838:	80 93 e8 01 	sts	0x01E8, r24
	locoData[55].address = 130;
 83c:	82 e8       	ldi	r24, 0x82	; 130
 83e:	80 93 ef 01 	sts	0x01EF, r24
	locoData[56].address = 50;
 842:	82 e3       	ldi	r24, 0x32	; 50
 844:	80 93 f6 01 	sts	0x01F6, r24
	locoData[57].address = 242;
 848:	82 ef       	ldi	r24, 0xF2	; 242
 84a:	80 93 fd 01 	sts	0x01FD, r24
	locoData[58].address = 178;
 84e:	82 eb       	ldi	r24, 0xB2	; 178
 850:	80 93 04 02 	sts	0x0204, r24
	locoData[59].address = 34;
 854:	90 93 0b 02 	sts	0x020B, r25
	locoData[60].address = 226;
 858:	82 ee       	ldi	r24, 0xE2	; 226
 85a:	80 93 12 02 	sts	0x0212, r24
	locoData[61].address = 162;
 85e:	82 ea       	ldi	r24, 0xA2	; 162
 860:	80 93 19 02 	sts	0x0219, r24
	locoData[62].address = 14;
 864:	8e e0       	ldi	r24, 0x0E	; 14
 866:	80 93 20 02 	sts	0x0220, r24
	locoData[63].address = 206;
 86a:	8e ec       	ldi	r24, 0xCE	; 206
 86c:	80 93 27 02 	sts	0x0227, r24
	locoData[64].address = 142;
 870:	8e e8       	ldi	r24, 0x8E	; 142
 872:	80 93 2e 02 	sts	0x022E, r24
	locoData[65].address = 62;
 876:	8e e3       	ldi	r24, 0x3E	; 62
 878:	80 93 35 02 	sts	0x0235, r24
	locoData[66].address = 254;
 87c:	8e ef       	ldi	r24, 0xFE	; 254
 87e:	80 93 3c 02 	sts	0x023C, r24
	locoData[67].address = 190;
 882:	8e eb       	ldi	r24, 0xBE	; 190
 884:	80 93 43 02 	sts	0x0243, r24
	locoData[68].address = 46;
 888:	8e e2       	ldi	r24, 0x2E	; 46
 88a:	80 93 4a 02 	sts	0x024A, r24
	locoData[69].address = 238;
 88e:	8e ee       	ldi	r24, 0xEE	; 238
 890:	80 93 51 02 	sts	0x0251, r24
	locoData[70].address = 174;
 894:	8e ea       	ldi	r24, 0xAE	; 174
 896:	80 93 58 02 	sts	0x0258, r24
	locoData[71].address = 10;
 89a:	8a e0       	ldi	r24, 0x0A	; 10
 89c:	80 93 5f 02 	sts	0x025F, r24
	locoData[72].address = 202;
 8a0:	8a ec       	ldi	r24, 0xCA	; 202
 8a2:	80 93 66 02 	sts	0x0266, r24
	locoData[73].address = 138;
 8a6:	8a e8       	ldi	r24, 0x8A	; 138
 8a8:	80 93 6d 02 	sts	0x026D, r24
	locoData[74].address = 58;
 8ac:	8a e3       	ldi	r24, 0x3A	; 58
 8ae:	80 93 74 02 	sts	0x0274, r24
	locoData[75].address = 250;
 8b2:	8a ef       	ldi	r24, 0xFA	; 250
 8b4:	80 93 7b 02 	sts	0x027B, r24
	locoData[76].address = 186;
 8b8:	8a eb       	ldi	r24, 0xBA	; 186
 8ba:	80 93 82 02 	sts	0x0282, r24
	locoData[77].address = 42;
 8be:	8a e2       	ldi	r24, 0x2A	; 42
 8c0:	80 93 89 02 	sts	0x0289, r24
	locoData[78].address = 234;
 8c4:	8a ee       	ldi	r24, 0xEA	; 234
 8c6:	80 93 90 02 	sts	0x0290, r24
	locoData[79].address = 0;
 8ca:	10 92 97 02 	sts	0x0297, r1
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e0       	ldi	r19, 0x00	; 0

	for (uint8_t i = 0; i < 80; i++) {
		locoData[i].active = 0;
 8d2:	f9 01       	movw	r30, r18
 8d4:	ee 0f       	add	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	e2 1b       	sub	r30, r18
 8e2:	f3 0b       	sbc	r31, r19
 8e4:	ec 58       	subi	r30, 0x8C	; 140
 8e6:	ff 4f       	sbci	r31, 0xFF	; 255
 8e8:	80 81       	ld	r24, Z
 8ea:	8d 7f       	andi	r24, 0xFD	; 253
 8ec:	80 83       	st	Z, r24
 8ee:	2f 5f       	subi	r18, 0xFF	; 255
 8f0:	3f 4f       	sbci	r19, 0xFF	; 255
	locoData[76].address = 186;
	locoData[77].address = 42;
	locoData[78].address = 234;
	locoData[79].address = 0;

	for (uint8_t i = 0; i < 80; i++) {
 8f2:	20 35       	cpi	r18, 0x50	; 80
 8f4:	31 05       	cpc	r19, r1
 8f6:	69 f7       	brne	.-38     	; 0x8d2 <initLocoData+0x22a>
		locoData[i].active = 0;
	}
	locoData[0].active = 1;
 8f8:	80 91 74 00 	lds	r24, 0x0074
 8fc:	82 60       	ori	r24, 0x02	; 2
 8fe:	80 93 74 00 	sts	0x0074, r24
}
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	ff 90       	pop	r15
 908:	08 95       	ret

0000090a <__vector_6>:
	timer0_interrupt = (timer0_interrupt + 1) % 4;
}

/********* PWM CODE **************/

ISR( TIMER1_COMPA_vect) {
 90a:	1f 92       	push	r1
 90c:	0f 92       	push	r0
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	0f 92       	push	r0
 912:	11 24       	eor	r1, r1
 914:	2f 93       	push	r18
 916:	3f 93       	push	r19
 918:	4f 93       	push	r20
 91a:	5f 93       	push	r21
 91c:	6f 93       	push	r22
 91e:	7f 93       	push	r23
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
 924:	af 93       	push	r26
 926:	bf 93       	push	r27
 928:	ef 93       	push	r30
 92a:	ff 93       	push	r31

	if (prepareNextData == 1 && actualBit == 0) {
 92c:	80 91 63 00 	lds	r24, 0x0063
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	b9 f1       	breq	.+110    	; 0x9a2 <__vector_6+0x98>
		setSolenoidWait();
		return;
	}

	if (actualBit == 0) {
 934:	80 91 6c 00 	lds	r24, 0x006C
 938:	88 23       	and	r24, r24
 93a:	39 f4       	brne	.+14     	; 0x94a <__vector_6+0x40>
		//pwmQueueIdx = 0;

		//uint8_t pwmQueueIdxLoc = pwmQueueIdx;
		//pwmQueueIdxLoc = (pwmQueueIdxLoc + 1) % 2;

		if (pwm_mode == MODE_SOLENOID) {
 93c:	80 91 65 00 	lds	r24, 0x0065
 940:	88 23       	and	r24, r24
 942:	e1 f5       	brne	.+120    	; 0x9bc <__vector_6+0xb2>
			//SOLENDOID
			ICR1H = 0x00;
 944:	17 bc       	out	0x27, r1	; 39
			ICR1L = 0xCC; // counting to TOP=204
 946:	8c ec       	ldi	r24, 0xCC	; 204
 948:	86 bd       	out	0x26, r24	; 38
			ICR1 = 0x198; // counting to TOP=408
		}

	}

	if (actualBit > 53) {
 94a:	80 91 6c 00 	lds	r24, 0x006C
 94e:	86 33       	cpi	r24, 0x36	; 54
 950:	70 f5       	brcc	.+92     	; 0x9ae <__vector_6+0xa4>
		actualBit = 0;
		prepareNextData = 1;
		return;
	}

	unsigned char b = commandQueue[0][actualBit];
 952:	e0 91 6c 00 	lds	r30, 0x006C
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	e2 56       	subi	r30, 0x62	; 98
 95a:	fd 4f       	sbci	r31, 0xFD	; 253
 95c:	e0 81       	ld	r30, Z

	if (b == 0) {
 95e:	ee 23       	and	r30, r30
 960:	d1 f0       	breq	.+52     	; 0x996 <__vector_6+0x8c>
		isLocoCommand == 0 ? setSolenoid0() : setLoco0();
	} else if (b == 1) {
 962:	e1 30       	cpi	r30, 0x01	; 1
 964:	c1 f1       	breq	.+112    	; 0x9d6 <__vector_6+0xcc>
		isLocoCommand == 0 ? setSolenoid1() : setLoco1();
	} else if (b == 2) {
 966:	e2 30       	cpi	r30, 0x02	; 2
 968:	81 f1       	breq	.+96     	; 0x9ca <__vector_6+0xc0>
		isLocoCommand == 0 ? setSolenoidWait() : setLocoWait();
	}

	actualBit++;
 96a:	80 91 6c 00 	lds	r24, 0x006C
 96e:	8f 5f       	subi	r24, 0xFF	; 255
 970:	80 93 6c 00 	sts	0x006C, r24

}
 974:	ff 91       	pop	r31
 976:	ef 91       	pop	r30
 978:	bf 91       	pop	r27
 97a:	af 91       	pop	r26
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
 980:	7f 91       	pop	r23
 982:	6f 91       	pop	r22
 984:	5f 91       	pop	r21
 986:	4f 91       	pop	r20
 988:	3f 91       	pop	r19
 98a:	2f 91       	pop	r18
 98c:	0f 90       	pop	r0
 98e:	0f be       	out	0x3f, r0	; 63
 990:	0f 90       	pop	r0
 992:	1f 90       	pop	r1
 994:	18 95       	reti
	}

	unsigned char b = commandQueue[0][actualBit];

	if (b == 0) {
		isLocoCommand == 0 ? setSolenoid0() : setLoco0();
 996:	80 91 60 00 	lds	r24, 0x0060
 99a:	88 23       	and	r24, r24
 99c:	a1 f4       	brne	.+40     	; 0x9c6 <__vector_6+0xbc>
 99e:	ff d0       	rcall	.+510    	; 0xb9e <setSolenoid0>
 9a0:	e4 cf       	rjmp	.-56     	; 0x96a <__vector_6+0x60>

/********* PWM CODE **************/

ISR( TIMER1_COMPA_vect) {

	if (prepareNextData == 1 && actualBit == 0) {
 9a2:	80 91 6c 00 	lds	r24, 0x006C
 9a6:	88 23       	and	r24, r24
 9a8:	29 f6       	brne	.-118    	; 0x934 <__vector_6+0x2a>
		setSolenoidWait();
 9aa:	05 d1       	rcall	.+522    	; 0xbb6 <setSolenoidWait>
 9ac:	e3 cf       	rjmp	.-58     	; 0x974 <__vector_6+0x6a>
		}

	}

	if (actualBit > 53) {
		setSolenoidWait();
 9ae:	03 d1       	rcall	.+518    	; 0xbb6 <setSolenoidWait>
		actualBit = 0;
 9b0:	10 92 6c 00 	sts	0x006C, r1
		prepareNextData = 1;
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	80 93 63 00 	sts	0x0063, r24
 9ba:	dc cf       	rjmp	.-72     	; 0x974 <__vector_6+0x6a>
			//SOLENDOID
			ICR1H = 0x00;
			ICR1L = 0xCC; // counting to TOP=204
		} else {
			//LOCO FREQUENCY
			ICR1 = 0x198; // counting to TOP=408
 9bc:	88 e9       	ldi	r24, 0x98	; 152
 9be:	91 e0       	ldi	r25, 0x01	; 1
 9c0:	97 bd       	out	0x27, r25	; 39
 9c2:	86 bd       	out	0x26, r24	; 38
 9c4:	c2 cf       	rjmp	.-124    	; 0x94a <__vector_6+0x40>
	}

	unsigned char b = commandQueue[0][actualBit];

	if (b == 0) {
		isLocoCommand == 0 ? setSolenoid0() : setLoco0();
 9c6:	fb d0       	rcall	.+502    	; 0xbbe <setLoco0>
 9c8:	d0 cf       	rjmp	.-96     	; 0x96a <__vector_6+0x60>
	} else if (b == 1) {
		isLocoCommand == 0 ? setSolenoid1() : setLoco1();
	} else if (b == 2) {
		isLocoCommand == 0 ? setSolenoidWait() : setLocoWait();
 9ca:	80 91 60 00 	lds	r24, 0x0060
 9ce:	88 23       	and	r24, r24
 9d0:	51 f4       	brne	.+20     	; 0x9e6 <__vector_6+0xdc>
 9d2:	f1 d0       	rcall	.+482    	; 0xbb6 <setSolenoidWait>
 9d4:	ca cf       	rjmp	.-108    	; 0x96a <__vector_6+0x60>
	unsigned char b = commandQueue[0][actualBit];

	if (b == 0) {
		isLocoCommand == 0 ? setSolenoid0() : setLoco0();
	} else if (b == 1) {
		isLocoCommand == 0 ? setSolenoid1() : setLoco1();
 9d6:	80 91 60 00 	lds	r24, 0x0060
 9da:	88 23       	and	r24, r24
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__vector_6+0xd8>
 9de:	e5 d0       	rcall	.+458    	; 0xbaa <setSolenoid1>
 9e0:	c4 cf       	rjmp	.-120    	; 0x96a <__vector_6+0x60>
 9e2:	f3 d0       	rcall	.+486    	; 0xbca <setLoco1>
 9e4:	c2 cf       	rjmp	.-124    	; 0x96a <__vector_6+0x60>
	} else if (b == 2) {
		isLocoCommand == 0 ? setSolenoidWait() : setLocoWait();
 9e6:	f7 d0       	rcall	.+494    	; 0xbd6 <setLocoWait>
 9e8:	c0 cf       	rjmp	.-128    	; 0x96a <__vector_6+0x60>

000009ea <checkForNewCommandPoll>:
unsigned char checkForNewCommand() {

	return 1;
}

unsigned char checkForNewCommandPoll() {
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29

	if (!(UCSRA & (1 << RXC))) {
 9ee:	5f 99       	sbic	0x0b, 7	; 11
 9f0:	04 c0       	rjmp	.+8      	; 0x9fa <checkForNewCommandPoll+0x10>
 9f2:	80 e0       	ldi	r24, 0x00	; 0
	}

	//flash_twice_red();

	return 1;
}
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	08 95       	ret

	if (!(UCSRA & (1 << RXC))) {
		return 0;
	}

	unsigned char b = uart_receive_poll();
 9fa:	17 d1       	rcall	.+558    	; 0xc2a <uart_receive_poll>
	cmd[0] = b;
 9fc:	80 93 5e 03 	sts	0x035E, r24
	if (b == 'w') {
 a00:	87 37       	cpi	r24, 0x77	; 119
 a02:	31 f0       	breq	.+12     	; 0xa10 <checkForNewCommandPoll+0x26>
		for (uint8_t i = 1; i < 3; i++) {
			b = uart_receive_poll();
			cmd[i] = b;
		}
	} else if (b == 'l') {
 a04:	8c 36       	cpi	r24, 0x6C	; 108
 a06:	61 f0       	breq	.+24     	; 0xa20 <checkForNewCommandPoll+0x36>
		for (uint8_t i = 1; i < 5; i++) {
 a08:	81 e0       	ldi	r24, 0x01	; 1
	}

	//flash_twice_red();

	return 1;
}
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	08 95       	ret

	unsigned char b = uart_receive_poll();
	cmd[0] = b;
	if (b == 'w') {
		for (uint8_t i = 1; i < 3; i++) {
			b = uart_receive_poll();
 a10:	0c d1       	rcall	.+536    	; 0xc2a <uart_receive_poll>
			cmd[i] = b;
 a12:	80 93 5f 03 	sts	0x035F, r24

	unsigned char b = uart_receive_poll();
	cmd[0] = b;
	if (b == 'w') {
		for (uint8_t i = 1; i < 3; i++) {
			b = uart_receive_poll();
 a16:	09 d1       	rcall	.+530    	; 0xc2a <uart_receive_poll>
			cmd[i] = b;
 a18:	80 93 60 03 	sts	0x0360, r24
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	ea cf       	rjmp	.-44     	; 0x9f4 <checkForNewCommandPoll+0xa>
		}
	} else if (b == 'l') {
 a20:	cf e5       	ldi	r28, 0x5F	; 95
 a22:	d3 e0       	ldi	r29, 0x03	; 3
		for (uint8_t i = 1; i < 5; i++) {
			b = uart_receive_poll();
 a24:	02 d1       	rcall	.+516    	; 0xc2a <uart_receive_poll>
			cmd[i] = b;
 a26:	89 93       	st	Y+, r24
		for (uint8_t i = 1; i < 3; i++) {
			b = uart_receive_poll();
			cmd[i] = b;
		}
	} else if (b == 'l') {
		for (uint8_t i = 1; i < 5; i++) {
 a28:	83 e0       	ldi	r24, 0x03	; 3
 a2a:	c3 36       	cpi	r28, 0x63	; 99
 a2c:	d8 07       	cpc	r29, r24
 a2e:	d1 f7       	brne	.-12     	; 0xa24 <checkForNewCommandPoll+0x3a>
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	eb cf       	rjmp	.-42     	; 0xa0a <checkForNewCommandPoll+0x20>

00000a34 <processData>:
	cli();
	return 0;
}

void processData() {
	if (cmd[0] == 'w') {
 a34:	80 91 5e 03 	lds	r24, 0x035E
 a38:	87 37       	cpi	r24, 0x77	; 119
 a3a:	59 f0       	breq	.+22     	; 0xa52 <processData+0x1e>
		//solenoid
		process_solenoid_cmd(cmd);
		uart_transmit_poll('w');
		uart_transmit_poll('\n');
	} else if (cmd[0] == 'l') {
 a3c:	8c 36       	cpi	r24, 0x6C	; 108
 a3e:	09 f0       	breq	.+2      	; 0xa42 <processData+0xe>
 a40:	08 95       	ret
		// loco
		process_loco_cmd(cmd);
 a42:	8e e5       	ldi	r24, 0x5E	; 94
 a44:	93 e0       	ldi	r25, 0x03	; 3
 a46:	3a dc       	rcall	.-1932   	; 0x2bc <process_loco_cmd>
		uart_transmit_poll('l');
 a48:	8c e6       	ldi	r24, 0x6C	; 108
 a4a:	eb d0       	rcall	.+470    	; 0xc22 <uart_transmit_poll>
		uart_transmit_poll('\n');
 a4c:	8a e0       	ldi	r24, 0x0A	; 10
 a4e:	e9 d0       	rcall	.+466    	; 0xc22 <uart_transmit_poll>
 a50:	08 95       	ret
}

void processData() {
	if (cmd[0] == 'w') {
		//solenoid
		process_solenoid_cmd(cmd);
 a52:	8e e5       	ldi	r24, 0x5E	; 94
 a54:	93 e0       	ldi	r25, 0x03	; 3
 a56:	f1 db       	rcall	.-2078   	; 0x23a <process_solenoid_cmd>
		uart_transmit_poll('w');
 a58:	87 e7       	ldi	r24, 0x77	; 119
 a5a:	e3 d0       	rcall	.+454    	; 0xc22 <uart_transmit_poll>
		uart_transmit_poll('\n');
 a5c:	8a e0       	ldi	r24, 0x0A	; 10
 a5e:	e1 d0       	rcall	.+450    	; 0xc22 <uart_transmit_poll>
 a60:	08 95       	ret

00000a62 <main>:
void prepareDataForPWM();
void processData();
void process_solenoid_cmd(unsigned char*);
void process_loco_cmd(unsigned char*);

int main() {
 a62:	ef 92       	push	r14
 a64:	ff 92       	push	r15
 a66:	1f 93       	push	r17
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29

	debug_init();
 a6c:	f8 da       	rcall	.-2576   	; 0x5e <debug_init>

	SPI_MasterInit();
 a6e:	b7 d0       	rcall	.+366    	; 0xbde <SPI_MasterInit>
	SPI_MasterTransmitDebug(0);
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	be d0       	rcall	.+380    	; 0xbf0 <SPI_MasterTransmitDebug>
 a74:	88 ee       	ldi	r24, 0xE8	; 232
 a76:	93 e0       	ldi	r25, 0x03	; 3
 a78:	20 e9       	ldi	r18, 0x90	; 144
 a7a:	31 e0       	ldi	r19, 0x01	; 1
 a7c:	f9 01       	movw	r30, r18
 a7e:	31 97       	sbiw	r30, 0x01	; 1
 a80:	f1 f7       	brne	.-4      	; 0xa7e <main+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a84:	d9 f7       	brne	.-10     	; 0xa7c <main+0x1a>
 a86:	11 e0       	ldi	r17, 0x01	; 1
 a88:	c0 e0       	ldi	r28, 0x00	; 0
 a8a:	d0 e0       	ldi	r29, 0x00	; 0
 a8c:	80 e9       	ldi	r24, 0x90	; 144
 a8e:	e8 2e       	mov	r14, r24
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	f8 2e       	mov	r15, r24

	_delay_ms(100);
	for (uint8_t i = 1; i < 64;) {
		SPI_MasterTransmitGO(i);
 a94:	81 2f       	mov	r24, r17
 a96:	b2 d0       	rcall	.+356    	; 0xbfc <SPI_MasterTransmitGO>
		i = i * 2;
 a98:	11 0f       	add	r17, r17
 a9a:	88 ee       	ldi	r24, 0xE8	; 232
 a9c:	93 e0       	ldi	r25, 0x03	; 3
 a9e:	f7 01       	movw	r30, r14
 aa0:	31 97       	sbiw	r30, 0x01	; 1
 aa2:	f1 f7       	brne	.-4      	; 0xaa0 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 aa4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 aa6:	d9 f7       	brne	.-10     	; 0xa9e <main+0x3c>
 aa8:	21 96       	adiw	r28, 0x01	; 1

	SPI_MasterInit();
	SPI_MasterTransmitDebug(0);

	_delay_ms(100);
	for (uint8_t i = 1; i < 64;) {
 aaa:	c6 30       	cpi	r28, 0x06	; 6
 aac:	d1 05       	cpc	r29, r1
 aae:	91 f7       	brne	.-28     	; 0xa94 <main+0x32>
		i = i * 2;
		_delay_ms(100);
	}

	//Initialize PWM Channel 1
	initPWM();
 ab0:	64 d0       	rcall	.+200    	; 0xb7a <initPWM>

	uart_init_poll(8);
 ab2:	88 e0       	ldi	r24, 0x08	; 8
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	ae d0       	rcall	.+348    	; 0xc14 <uart_init_poll>

	//uart_init();
	setSolenoidWait();
 ab8:	7e d0       	rcall	.+252    	; 0xbb6 <setSolenoidWait>

	initLocoData();
 aba:	f6 dd       	rcall	.-1044   	; 0x6a8 <initLocoData>
	initPortData();
 abc:	dd dd       	rcall	.-1094   	; 0x678 <initPortData>

	//Loco FREQUENCY
	pwm_mode = MODE_LOCO;
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	80 93 65 00 	sts	0x0065, r24
	TCCR1A &= ~(1 << COM1A1); // DEACTIVATE PWM
 ac4:	8f b5       	in	r24, 0x2f	; 47
 ac6:	8f 77       	andi	r24, 0x7F	; 127
 ac8:	8f bd       	out	0x2f, r24	; 47
	ICR1 = 0x192; // counting to TOP takes
 aca:	82 e9       	ldi	r24, 0x92	; 146
 acc:	91 e0       	ldi	r25, 0x01	; 1
 ace:	97 bd       	out	0x27, r25	; 39
 ad0:	86 bd       	out	0x26, r24	; 38
	TCCR1A |= (1 << COM1A1); // ACTIVATE PWM
 ad2:	8f b5       	in	r24, 0x2f	; 47
 ad4:	80 68       	ori	r24, 0x80	; 128
 ad6:	8f bd       	out	0x2f, r24	; 47

	// init Timer0
	TIMSK |= (1 << TOIE0); // interrupt enable - here overflow
 ad8:	89 b7       	in	r24, 0x39	; 57
 ada:	81 60       	ori	r24, 0x01	; 1
 adc:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= TIMER0_PRESCALER; // use defined prescaler value
 ade:	83 b7       	in	r24, 0x33	; 51
 ae0:	85 60       	ori	r24, 0x05	; 5
 ae2:	83 bf       	out	0x33, r24	; 51

	sei();
 ae4:	78 94       	sei
 ae6:	20 e0       	ldi	r18, 0x00	; 0
 ae8:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < MAX_SOLENOID_QUEUE; i++) {

		solenoidData[i].timerDetected = 0;
 aea:	f9 01       	movw	r30, r18
 aec:	ee 0f       	add	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	e2 0f       	add	r30, r18
 af2:	f3 1f       	adc	r31, r19
 af4:	ec 5d       	subi	r30, 0xDC	; 220
 af6:	fc 4f       	sbci	r31, 0xFC	; 252
 af8:	80 81       	ld	r24, Z
		solenoidData[i].active= 0;
 afa:	8c 7f       	andi	r24, 0xFC	; 252
 afc:	80 83       	st	Z, r24
	TIMSK |= (1 << TOIE0); // interrupt enable - here overflow
	TCCR0 |= TIMER0_PRESCALER; // use defined prescaler value

	sei();

	for (int i = 0; i < MAX_SOLENOID_QUEUE; i++) {
 afe:	2f 5f       	subi	r18, 0xFF	; 255
 b00:	3f 4f       	sbci	r19, 0xFF	; 255
 b02:	24 31       	cpi	r18, 0x14	; 20
 b04:	31 05       	cpc	r19, r1
 b06:	89 f7       	brne	.-30     	; 0xaea <main+0x88>
		 red_led_on();
		 } else {
		 red_led_off();
		 green_led_on();
		 }*/
		debug_init();
 b08:	aa da       	rcall	.-2732   	; 0x5e <debug_init>

		debugCounter++;
 b0a:	80 91 68 00 	lds	r24, 0x0068
 b0e:	8f 5f       	subi	r24, 0xFF	; 255
 b10:	80 93 68 00 	sts	0x0068, r24

		unsigned char cmdAvail = checkForNewCommandPoll();
 b14:	6a df       	rcall	.-300    	; 0x9ea <checkForNewCommandPoll>

		if (cmdAvail == 1) {
 b16:	81 30       	cpi	r24, 0x01	; 1
 b18:	61 f1       	breq	.+88     	; 0xb72 <main+0x110>
			processData(cmd);
		}


		// TODO: check for timer timeout
		if (timer0_interrupt == 0) {
 b1a:	80 91 64 00 	lds	r24, 0x0064
 b1e:	88 23       	and	r24, r24
 b20:	11 f5       	brne	.+68     	; 0xb66 <main+0x104>
 b22:	40 91 62 00 	lds	r20, 0x0062
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	06 c0       	rjmp	.+12     	; 0xb38 <main+0xd6>
			//green_led_on();

			for (int i = 0; i < MAX_SOLENOID_QUEUE; i++) {
				if (solenoidData[i].active
						&& solenoidData[i].timerDetected == 0) {
					solenoidData[i].timerDetected = 1;
 b2c:	32 60       	ori	r19, 0x02	; 2
 b2e:	30 83       	st	Z, r19

		// TODO: check for timer timeout
		if (timer0_interrupt == 0) {
			//green_led_on();

			for (int i = 0; i < MAX_SOLENOID_QUEUE; i++) {
 b30:	01 96       	adiw	r24, 0x01	; 1
 b32:	84 31       	cpi	r24, 0x14	; 20
 b34:	91 05       	cpc	r25, r1
 b36:	a9 f0       	breq	.+42     	; 0xb62 <main+0x100>
				if (solenoidData[i].active
 b38:	fc 01       	movw	r30, r24
 b3a:	ee 0f       	add	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	e8 0f       	add	r30, r24
 b40:	f9 1f       	adc	r31, r25
 b42:	ec 5d       	subi	r30, 0xDC	; 220
 b44:	fc 4f       	sbci	r31, 0xFC	; 252
 b46:	30 81       	ld	r19, Z
 b48:	30 ff       	sbrs	r19, 0
 b4a:	f2 cf       	rjmp	.-28     	; 0xb30 <main+0xce>
 b4c:	23 2f       	mov	r18, r19
 b4e:	26 95       	lsr	r18
 b50:	21 70       	andi	r18, 0x01	; 1
 b52:	61 f3       	breq	.-40     	; 0xb2c <main+0xca>
						&& solenoidData[i].timerDetected == 0) {
					solenoidData[i].timerDetected = 1;
				} else if (solenoidData[i].active
 b54:	21 30       	cpi	r18, 0x01	; 1
 b56:	61 f7       	brne	.-40     	; 0xb30 <main+0xce>
 b58:	48 2f       	mov	r20, r24

		// TODO: check for timer timeout
		if (timer0_interrupt == 0) {
			//green_led_on();

			for (int i = 0; i < MAX_SOLENOID_QUEUE; i++) {
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	84 31       	cpi	r24, 0x14	; 20
 b5e:	91 05       	cpc	r25, r1
 b60:	59 f7       	brne	.-42     	; 0xb38 <main+0xd6>
 b62:	40 93 62 00 	sts	0x0062, r20
			}

		} else {
			//green_led_off();
		}
		if (prepareNextData == 1)
 b66:	80 91 63 00 	lds	r24, 0x0063
 b6a:	81 30       	cpi	r24, 0x01	; 1
 b6c:	69 f6       	brne	.-102    	; 0xb08 <main+0xa6>
			prepareDataForPWM();
 b6e:	e4 db       	rcall	.-2104   	; 0x338 <prepareDataForPWM>
 b70:	cb cf       	rjmp	.-106    	; 0xb08 <main+0xa6>
		debugCounter++;

		unsigned char cmdAvail = checkForNewCommandPoll();

		if (cmdAvail == 1) {
			processData(cmd);
 b72:	8e e5       	ldi	r24, 0x5E	; 94
 b74:	93 e0       	ldi	r25, 0x03	; 3
 b76:	5e df       	rcall	.-324    	; 0xa34 <processData>
 b78:	d0 cf       	rjmp	.-96     	; 0xb1a <main+0xb8>

00000b7a <initPWM>:

#include "pwm.h"

void initPWM() {

	PWM_HELP_OUTPUT_DDR |= (1 << PWM_HELP_OUTPUT);
 b7a:	a0 9a       	sbi	0x14, 0	; 20

	DDRB |= (1 << PB1);
 b7c:	b9 9a       	sbi	0x17, 1	; 23

	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 b7e:	8a e1       	ldi	r24, 0x1A	; 26
 b80:	8e bd       	out	0x2e, r24	; 46
	ICR1H = 0x00;
 b82:	17 bc       	out	0x27, r1	; 39
	ICR1L = 0xCC; // counting to TOP takes
 b84:	8c ec       	ldi	r24, 0xCC	; 204
 b86:	86 bd       	out	0x26, r24	; 38

	TIMSK |= (1 << OCIE1A);
 b88:	89 b7       	in	r24, 0x39	; 57
 b8a:	80 61       	ori	r24, 0x10	; 16
 b8c:	89 bf       	out	0x39, r24	; 57

	OCR1AH = 0x00;
 b8e:	1b bc       	out	0x2b, r1	; 43
	TCCR1A = (1 << WGM11); //fast PWM with Prescaler = 8
 b90:	82 e0       	ldi	r24, 0x02	; 2
 b92:	8f bd       	out	0x2f, r24	; 47
}
 b94:	08 95       	ret

00000b96 <setPWMOutput>:

void setPWMOutput(uint16_t duty) {
	PWM_HELP_OUTPUT_PORT |= (1 << PWM_HELP_OUTPUT);
 b96:	a8 9a       	sbi	0x15, 0	; 21
	OCR1A = duty;
 b98:	9b bd       	out	0x2b, r25	; 43
 b9a:	8a bd       	out	0x2a, r24	; 42
}
 b9c:	08 95       	ret

00000b9e <setSolenoid0>:

void setSolenoid0() {
	PWM_HELP_OUTPUT_PORT |= (1 << PWM_HELP_OUTPUT);
 b9e:	a8 9a       	sbi	0x15, 0	; 21
	OCR1A = 24;
 ba0:	88 e1       	ldi	r24, 0x18	; 24
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	9b bd       	out	0x2b, r25	; 43
 ba6:	8a bd       	out	0x2a, r24	; 42
}
 ba8:	08 95       	ret

00000baa <setSolenoid1>:

void setSolenoid1() {
	PWM_HELP_OUTPUT_PORT |= (1 << PWM_HELP_OUTPUT);
 baa:	a8 9a       	sbi	0x15, 0	; 21
	OCR1A = 180;
 bac:	84 eb       	ldi	r24, 0xB4	; 180
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	9b bd       	out	0x2b, r25	; 43
 bb2:	8a bd       	out	0x2a, r24	; 42
}
 bb4:	08 95       	ret

00000bb6 <setSolenoidWait>:

void setSolenoidWait() {
	PWM_HELP_OUTPUT_PORT &= ~(1 << PWM_HELP_OUTPUT);
 bb6:	a8 98       	cbi	0x15, 0	; 21
	OCR1A = 0;
 bb8:	1b bc       	out	0x2b, r1	; 43
 bba:	1a bc       	out	0x2a, r1	; 42
}
 bbc:	08 95       	ret

00000bbe <setLoco0>:

void setLoco0() {
	PWM_HELP_OUTPUT_PORT |= (1 << PWM_HELP_OUTPUT);
 bbe:	a8 9a       	sbi	0x15, 0	; 21
	OCR1A = 48;
 bc0:	80 e3       	ldi	r24, 0x30	; 48
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	9b bd       	out	0x2b, r25	; 43
 bc6:	8a bd       	out	0x2a, r24	; 42

}
 bc8:	08 95       	ret

00000bca <setLoco1>:
void setLoco1() {
	PWM_HELP_OUTPUT_PORT |= (1 << PWM_HELP_OUTPUT);
 bca:	a8 9a       	sbi	0x15, 0	; 21
	OCR1A = 260;
 bcc:	84 e0       	ldi	r24, 0x04	; 4
 bce:	91 e0       	ldi	r25, 0x01	; 1
 bd0:	9b bd       	out	0x2b, r25	; 43
 bd2:	8a bd       	out	0x2a, r24	; 42
}
 bd4:	08 95       	ret

00000bd6 <setLocoWait>:

void setLocoWait() {
	PWM_HELP_OUTPUT_PORT &= ~(1 << PWM_HELP_OUTPUT);
 bd6:	a8 98       	cbi	0x15, 0	; 21
	OCR1A = 0;
 bd8:	1b bc       	out	0x2b, r1	; 43
 bda:	1a bc       	out	0x2a, r1	; 42
}
 bdc:	08 95       	ret

00000bde <SPI_MasterInit>:
#include <avr/interrupt.h>


void SPI_MasterInit(void) {

	SS_PORT_DDR |= (1 << SS_GO) | (1 << SS_SHORT) | (1 << SS_DBG_LED);
 bde:	84 b3       	in	r24, 0x14	; 20
 be0:	8e 60       	ori	r24, 0x0E	; 14
 be2:	84 bb       	out	0x14, r24	; 20

	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK);
 be4:	87 b3       	in	r24, 0x17	; 23
 be6:	88 62       	ori	r24, 0x28	; 40
 be8:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 bea:	81 e5       	ldi	r24, 0x51	; 81
 bec:	8d b9       	out	0x0d, r24	; 13
}
 bee:	08 95       	ret

00000bf0 <SPI_MasterTransmitDebug>:
void SPI_MasterTransmitDebug(unsigned char cData) {
	/* Start transmission */
	SPDR = cData;
 bf0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1 << SPIF)))
 bf2:	77 9b       	sbis	0x0e, 7	; 14
 bf4:	fe cf       	rjmp	.-4      	; 0xbf2 <SPI_MasterTransmitDebug+0x2>
		;
	SS_PORT |= (1 << SS_DBG_LED);
 bf6:	ab 9a       	sbi	0x15, 3	; 21
	SS_PORT &= ~(1 << SS_DBG_LED);
 bf8:	ab 98       	cbi	0x15, 3	; 21

}
 bfa:	08 95       	ret

00000bfc <SPI_MasterTransmitGO>:

void SPI_MasterTransmitGO(unsigned char cData) {
	/* Start transmission */
	SPDR = cData;
 bfc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1 << SPIF)))
 bfe:	77 9b       	sbis	0x0e, 7	; 14
 c00:	fe cf       	rjmp	.-4      	; 0xbfe <SPI_MasterTransmitGO+0x2>
		;
	SS_PORT |= (1 << SS_GO);
 c02:	a9 9a       	sbi	0x15, 1	; 21
	SS_PORT &= ~(1 << SS_GO);
 c04:	a9 98       	cbi	0x15, 1	; 21

}
 c06:	08 95       	ret

00000c08 <SPI_MasterTransmitShort>:

void SPI_MasterTransmitShort(unsigned char cData) {
	/* Start transmission */
	SPDR = cData;
 c08:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1 << SPIF)))
 c0a:	77 9b       	sbis	0x0e, 7	; 14
 c0c:	fe cf       	rjmp	.-4      	; 0xc0a <SPI_MasterTransmitShort+0x2>
		;
	SS_PORT |= (1 << SS_SHORT);
 c0e:	aa 9a       	sbi	0x15, 2	; 21
	SS_PORT &= ~(1 << SS_SHORT);
 c10:	aa 98       	cbi	0x15, 2	; 21

}
 c12:	08 95       	ret

00000c14 <uart_init_poll>:
#include "uart.h"


void uart_init_poll(unsigned int ubrr) {
	/* Set baud rate */
	UBRRH = (unsigned char) (ubrr >> 8);
 c14:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) ubrr;
 c16:	89 b9       	out	0x09, r24	; 9

	/* Enable receiver and transmitter */UCSRB = (1 << RXEN) | (1 << TXEN);
 c18:	88 e1       	ldi	r24, 0x18	; 24
 c1a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1 << URSEL) | (1 << USBS) | (1 << UCSZ0) | (1 << UCSZ1);
 c1c:	8e e8       	ldi	r24, 0x8E	; 142
 c1e:	80 bd       	out	0x20, r24	; 32
}
 c20:	08 95       	ret

00000c22 <uart_transmit_poll>:

void uart_transmit_poll(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSRA & (1 << UDRE)))
 c22:	5d 9b       	sbis	0x0b, 5	; 11
 c24:	fe cf       	rjmp	.-4      	; 0xc22 <uart_transmit_poll>
		;
	/* Put data into buffer, sends the data */
	UDR = data;
 c26:	8c b9       	out	0x0c, r24	; 12
}
 c28:	08 95       	ret

00000c2a <uart_receive_poll>:

unsigned char uart_receive_poll(void) {
	/* Wait for data to be received */
	while (!(UCSRA & (1 << RXC)))
 c2a:	5f 9b       	sbis	0x0b, 7	; 11
 c2c:	fe cf       	rjmp	.-4      	; 0xc2a <uart_receive_poll>
		;

	/* Get and return received data from buffer */

	return UDR;
 c2e:	8c b1       	in	r24, 0x0c	; 12
}
 c30:	08 95       	ret

00000c32 <__vector_11>:
    fifo_init (&outfifo, outbuf, BUFSIZE_OUT);
}

// Empfangene Zeichen werden in die Eingabgs-FIFO gespeichert und warten dort
ISR (USART_RXC_vect)
{
 c32:	1f 92       	push	r1
 c34:	0f 92       	push	r0
 c36:	0f b6       	in	r0, 0x3f	; 63
 c38:	0f 92       	push	r0
 c3a:	11 24       	eor	r1, r1
 c3c:	2f 93       	push	r18
 c3e:	8f 93       	push	r24
 c40:	9f 93       	push	r25
 c42:	ef 93       	push	r30
 c44:	ff 93       	push	r31
    _inline_fifo_put (&infifo, UDR);
 c46:	2c b1       	in	r18, 0x0c	; 12
extern uint8_t fifo_get_size(fifo_t*);

static inline uint8_t
_inline_fifo_put (fifo_t *f, const uint8_t data)
{
	if (f->count >= f->size)
 c48:	90 91 ab 03 	lds	r25, 0x03AB
 c4c:	80 91 ac 03 	lds	r24, 0x03AC
 c50:	98 17       	cp	r25, r24
 c52:	b8 f4       	brcc	.+46     	; 0xc82 <__vector_11+0x50>
		return 0;

	uint8_t * pwrite = f->pwrite;

	*(pwrite++) = data;
 c54:	e0 91 af 03 	lds	r30, 0x03AF
 c58:	f0 91 b0 03 	lds	r31, 0x03B0
 c5c:	21 93       	st	Z+, r18

	uint8_t write2end = f->write2end;
 c5e:	80 91 b2 03 	lds	r24, 0x03B2

	if (--write2end == 0)
 c62:	81 50       	subi	r24, 0x01	; 1
 c64:	c1 f0       	breq	.+48     	; 0xc96 <__vector_11+0x64>
	{
		write2end = f->size;
		pwrite -= write2end;
	}

	f->write2end = write2end;
 c66:	80 93 b2 03 	sts	0x03B2, r24
	f->pwrite = pwrite;
 c6a:	f0 93 b0 03 	sts	0x03B0, r31
 c6e:	e0 93 af 03 	sts	0x03AF, r30

	uint8_t sreg = SREG;
 c72:	9f b7       	in	r25, 0x3f	; 63
	cli();
 c74:	f8 94       	cli
	f->count++;
 c76:	80 91 ab 03 	lds	r24, 0x03AB
 c7a:	8f 5f       	subi	r24, 0xFF	; 255
 c7c:	80 93 ab 03 	sts	0x03AB, r24
	SREG = sreg;
 c80:	9f bf       	out	0x3f, r25	; 63
}
 c82:	ff 91       	pop	r31
 c84:	ef 91       	pop	r30
 c86:	9f 91       	pop	r25
 c88:	8f 91       	pop	r24
 c8a:	2f 91       	pop	r18
 c8c:	0f 90       	pop	r0
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	0f 90       	pop	r0
 c92:	1f 90       	pop	r1
 c94:	18 95       	reti

	uint8_t write2end = f->write2end;

	if (--write2end == 0)
	{
		write2end = f->size;
 c96:	80 91 ac 03 	lds	r24, 0x03AC
		pwrite -= write2end;
 c9a:	e8 1b       	sub	r30, r24
 c9c:	f1 09       	sbc	r31, r1
 c9e:	e3 cf       	rjmp	.-58     	; 0xc66 <__vector_11+0x34>

00000ca0 <__vector_12>:

// Ein Zeichen aus der Ausgabe-FIFO lesen und ausgeben
// Ist das Zeichen fertig ausgegeben, wird ein neuer SIG_UART_DATA-IRQ getriggert
// Ist die FIFO leer, deaktiviert die ISR ihren eigenen IRQ.
ISR (USART_UDRE_vect)
{
 ca0:	1f 92       	push	r1
 ca2:	0f 92       	push	r0
 ca4:	0f b6       	in	r0, 0x3f	; 63
 ca6:	0f 92       	push	r0
 ca8:	11 24       	eor	r1, r1
 caa:	2f 93       	push	r18
 cac:	8f 93       	push	r24
 cae:	9f 93       	push	r25
 cb0:	ef 93       	push	r30
 cb2:	ff 93       	push	r31
    if (outfifo.count > 0)
 cb4:	80 91 a3 03 	lds	r24, 0x03A3
 cb8:	88 23       	and	r24, r24
 cba:	31 f1       	breq	.+76     	; 0xd08 <__vector_12+0x68>

static inline uint8_t
_inline_fifo_get (fifo_t *f)
{
	uint8_t *pread = f->pread;
	uint8_t data = *(pread++);
 cbc:	e0 91 a5 03 	lds	r30, 0x03A5
 cc0:	f0 91 a6 03 	lds	r31, 0x03A6
 cc4:	21 91       	ld	r18, Z+
	uint8_t read2end = f->read2end;
 cc6:	80 91 a9 03 	lds	r24, 0x03A9

	if (--read2end == 0)
 cca:	81 50       	subi	r24, 0x01	; 1
 ccc:	21 f4       	brne	.+8      	; 0xcd6 <__vector_12+0x36>
	{
		read2end = f->size;
 cce:	80 91 a4 03 	lds	r24, 0x03A4
		pread -= read2end;
 cd2:	e8 1b       	sub	r30, r24
 cd4:	f1 09       	sbc	r31, r1
	}

	f->pread = pread;
 cd6:	f0 93 a6 03 	sts	0x03A6, r31
 cda:	e0 93 a5 03 	sts	0x03A5, r30
	f->read2end = read2end;
 cde:	80 93 a9 03 	sts	0x03A9, r24

	uint8_t sreg = SREG;
 ce2:	9f b7       	in	r25, 0x3f	; 63
	cli();
 ce4:	f8 94       	cli
	f->count--;
 ce6:	80 91 a3 03 	lds	r24, 0x03A3
 cea:	81 50       	subi	r24, 0x01	; 1
 cec:	80 93 a3 03 	sts	0x03A3, r24
	SREG = sreg;
 cf0:	9f bf       	out	0x3f, r25	; 63
       UDR = _inline_fifo_get (&outfifo);
 cf2:	2c b9       	out	0x0c, r18	; 12
    else
        UCSRB &= ~(1 << UDRIE);
}
 cf4:	ff 91       	pop	r31
 cf6:	ef 91       	pop	r30
 cf8:	9f 91       	pop	r25
 cfa:	8f 91       	pop	r24
 cfc:	2f 91       	pop	r18
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	0f 90       	pop	r0
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti
ISR (USART_UDRE_vect)
{
    if (outfifo.count > 0)
       UDR = _inline_fifo_get (&outfifo);
    else
        UCSRB &= ~(1 << UDRIE);
 d08:	55 98       	cbi	0x0a, 5	; 10
 d0a:	f4 cf       	rjmp	.-24     	; 0xcf4 <__vector_12+0x54>

00000d0c <uart_get_inbuf_size>:
{
    return fifo_get_wait (&infifo);
}

uint8_t uart_get_inbuf_size(void) {
	return fifo_get_size(&infifo);
 d0c:	8b ea       	ldi	r24, 0xAB	; 171
 d0e:	93 e0       	ldi	r25, 0x03	; 3
 d10:	91 da       	rcall	.-2782   	; 0x234 <fifo_get_size>
}
 d12:	08 95       	ret

00000d14 <uart_getc_wait>:
    return fifo_get_nowait (&infifo);
}

uint8_t uart_getc_wait (void)
{
    return fifo_get_wait (&infifo);
 d14:	8b ea       	ldi	r24, 0xAB	; 171
 d16:	93 e0       	ldi	r25, 0x03	; 3
 d18:	57 da       	rcall	.-2898   	; 0x1c8 <fifo_get_wait>
}
 d1a:	08 95       	ret

00000d1c <uart_getc_nowait>:
    return ret;
}

int uart_getc_nowait (void)
{
    return fifo_get_nowait (&infifo);
 d1c:	8b ea       	ldi	r24, 0xAB	; 171
 d1e:	93 e0       	ldi	r25, 0x03	; 3
 d20:	6b da       	rcall	.-2858   	; 0x1f8 <fifo_get_nowait>
}
 d22:	08 95       	ret

00000d24 <uart_putc>:
    else
        UCSRB &= ~(1 << UDRIE);
}

int uart_putc (const uint8_t c)
{
 d24:	68 2f       	mov	r22, r24
    int ret = fifo_put (&outfifo, c);
 d26:	83 ea       	ldi	r24, 0xA3	; 163
 d28:	93 e0       	ldi	r25, 0x03	; 3
 d2a:	33 da       	rcall	.-2970   	; 0x192 <fifo_put>

    UCSRB |= (1 << UDRIE);
 d2c:	55 9a       	sbi	0x0a, 5	; 10

    return ret;
}
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	08 95       	ret

00000d32 <uart_init>:
uint8_t outbuf[BUFSIZE_OUT];
fifo_t outfifo;

void uart_init (void)
{
    uint8_t sreg = SREG;
 d32:	9f b7       	in	r25, 0x3f	; 63
    uint16_t ubrr = (uint16_t) ((uint32_t) F_CPU/(16UL*BAUDRATE) - 1);

    UBRRH = (uint8_t) (ubrr>>8);
 d34:	10 bc       	out	0x20, r1	; 32
    UBRRL = (uint8_t) (ubrr);
 d36:	87 e0       	ldi	r24, 0x07	; 7
 d38:	89 b9       	out	0x09, r24	; 9

    // Interrupts kurz deaktivieren
    cli();
 d3a:	f8 94       	cli

    // UART Receiver und Transmitter anschalten, Receive-Interrupt aktivieren
    // Data mode 8N1, asynchron
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 d3c:	88 e9       	ldi	r24, 0x98	; 152
 d3e:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 d40:	86 e8       	ldi	r24, 0x86	; 134
 d42:	80 bd       	out	0x20, r24	; 32

    // Flush Receive-Buffer (entfernen evtl. vorhandener ungültiger Werte)
    do
    {
        // UDR auslesen (Wert wird nicht verwendet)
        UDR;
 d44:	8c b1       	in	r24, 0x0c	; 12
    }
    while (UCSRA & (1 << RXC));
 d46:	5f 99       	sbic	0x0b, 7	; 11
 d48:	fd cf       	rjmp	.-6      	; 0xd44 <uart_init+0x12>

    // Rücksetzen von Receive und Transmit Complete-Flags
    UCSRA = (1 << RXC) | (1 << TXC);
 d4a:	80 ec       	ldi	r24, 0xC0	; 192
 d4c:	8b b9       	out	0x0b, r24	; 11

    // Global Interrupt-Flag wieder herstellen
    SREG = sreg;
 d4e:	9f bf       	out	0x3f, r25	; 63

    // FIFOs für Ein- und Ausgabe initialisieren
    fifo_init (&infifo,   inbuf, BUFSIZE_IN);
 d50:	8b ea       	ldi	r24, 0xAB	; 171
 d52:	93 e0       	ldi	r25, 0x03	; 3
 d54:	63 e6       	ldi	r22, 0x63	; 99
 d56:	73 e0       	ldi	r23, 0x03	; 3
 d58:	40 e4       	ldi	r20, 0x40	; 64
 d5a:	11 da       	rcall	.-3038   	; 0x17e <fifo_init>
    fifo_init (&outfifo, outbuf, BUFSIZE_OUT);
 d5c:	83 ea       	ldi	r24, 0xA3	; 163
 d5e:	93 e0       	ldi	r25, 0x03	; 3
 d60:	63 eb       	ldi	r22, 0xB3	; 179
 d62:	73 e0       	ldi	r23, 0x03	; 3
 d64:	40 e4       	ldi	r20, 0x40	; 64
 d66:	0b da       	rcall	.-3050   	; 0x17e <fifo_init>
}
 d68:	08 95       	ret

00000d6a <__udivmodqi4>:
 d6a:	99 1b       	sub	r25, r25
 d6c:	79 e0       	ldi	r23, 0x09	; 9
 d6e:	04 c0       	rjmp	.+8      	; 0xd78 <__udivmodqi4_ep>

00000d70 <__udivmodqi4_loop>:
 d70:	99 1f       	adc	r25, r25
 d72:	96 17       	cp	r25, r22
 d74:	08 f0       	brcs	.+2      	; 0xd78 <__udivmodqi4_ep>
 d76:	96 1b       	sub	r25, r22

00000d78 <__udivmodqi4_ep>:
 d78:	88 1f       	adc	r24, r24
 d7a:	7a 95       	dec	r23
 d7c:	c9 f7       	brne	.-14     	; 0xd70 <__udivmodqi4_loop>
 d7e:	80 95       	com	r24
 d80:	08 95       	ret

00000d82 <__divmodhi4>:
 d82:	97 fb       	bst	r25, 7
 d84:	09 2e       	mov	r0, r25
 d86:	07 26       	eor	r0, r23
 d88:	0a d0       	rcall	.+20     	; 0xd9e <__divmodhi4_neg1>
 d8a:	77 fd       	sbrc	r23, 7
 d8c:	04 d0       	rcall	.+8      	; 0xd96 <__divmodhi4_neg2>
 d8e:	0c d0       	rcall	.+24     	; 0xda8 <__udivmodhi4>
 d90:	06 d0       	rcall	.+12     	; 0xd9e <__divmodhi4_neg1>
 d92:	00 20       	and	r0, r0
 d94:	1a f4       	brpl	.+6      	; 0xd9c <__divmodhi4_exit>

00000d96 <__divmodhi4_neg2>:
 d96:	70 95       	com	r23
 d98:	61 95       	neg	r22
 d9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000d9c <__divmodhi4_exit>:
 d9c:	08 95       	ret

00000d9e <__divmodhi4_neg1>:
 d9e:	f6 f7       	brtc	.-4      	; 0xd9c <__divmodhi4_exit>
 da0:	90 95       	com	r25
 da2:	81 95       	neg	r24
 da4:	9f 4f       	sbci	r25, 0xFF	; 255
 da6:	08 95       	ret

00000da8 <__udivmodhi4>:
 da8:	aa 1b       	sub	r26, r26
 daa:	bb 1b       	sub	r27, r27
 dac:	51 e1       	ldi	r21, 0x11	; 17
 dae:	07 c0       	rjmp	.+14     	; 0xdbe <__udivmodhi4_ep>

00000db0 <__udivmodhi4_loop>:
 db0:	aa 1f       	adc	r26, r26
 db2:	bb 1f       	adc	r27, r27
 db4:	a6 17       	cp	r26, r22
 db6:	b7 07       	cpc	r27, r23
 db8:	10 f0       	brcs	.+4      	; 0xdbe <__udivmodhi4_ep>
 dba:	a6 1b       	sub	r26, r22
 dbc:	b7 0b       	sbc	r27, r23

00000dbe <__udivmodhi4_ep>:
 dbe:	88 1f       	adc	r24, r24
 dc0:	99 1f       	adc	r25, r25
 dc2:	5a 95       	dec	r21
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__udivmodhi4_loop>
 dc6:	80 95       	com	r24
 dc8:	90 95       	com	r25
 dca:	bc 01       	movw	r22, r24
 dcc:	cd 01       	movw	r24, r26
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
